// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Activiti.Net
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// # activiti
    ///
    /// - Activiti is battle-tested Business Process Management. Organizations
    /// across the world depend on the open source platform in a huge range of
    /// demanding situations. It supports open standards with BPMN and DMN so
    /// you can create processes that suit you.
    /// </summary>
    public partial interface IActivitiRESTAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get form data
        /// </summary>
        /// <param name='taskId'>
        /// The task id corresponding to the form data that needs to be
        /// retrieved.
        /// </param>
        /// <param name='processDefinitionId'>
        /// The process definition id corresponding to the start event form
        /// data that needs to be retrieved.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FormDataResponse>> GetFormDataWithHttpMessagesAsync(string taskId = default(string), string processDefinitionId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Submit task form data
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessInstanceResponse>> SubmitFormWithHttpMessagesAsync(SubmitFormRequest body = default(SubmitFormRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get historic activity instances
        /// </summary>
        /// <param name='activityId'>
        /// An id of the activity instance.
        /// </param>
        /// <param name='activityInstanceId'>
        /// An id of the historic activity instance.
        /// </param>
        /// <param name='activityName'>
        /// The name of the historic activity instance.
        /// </param>
        /// <param name='activityType'>
        /// The element type of the historic activity instance.
        /// </param>
        /// <param name='executionId'>
        /// The execution id of the historic activity instance.
        /// </param>
        /// <param name='finished'>
        /// Indication if the historic activity instance is finished.
        /// </param>
        /// <param name='taskAssignee'>
        /// The assignee of the historic activity instance.
        /// </param>
        /// <param name='processInstanceId'>
        /// The process instance id of the historic activity instance.
        /// </param>
        /// <param name='processDefinitionId'>
        /// The process definition id of the historic activity instance.
        /// </param>
        /// <param name='tenantId'>
        /// Only return instances with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return instances with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns instances without a tenantId set. If false,
        /// the withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetHistoricActivityInstancesWithHttpMessagesAsync(string activityId = default(string), string activityInstanceId = default(string), string activityName = default(string), string activityType = default(string), string executionId = default(string), bool? finished = default(bool?), string taskAssignee = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get historic detail
        /// </summary>
        /// <param name='id'>
        /// The id of the historic detail.
        /// </param>
        /// <param name='processInstanceId'>
        /// The process instance id of the historic detail.
        /// </param>
        /// <param name='executionId'>
        /// The execution id of the historic detail.
        /// </param>
        /// <param name='activityInstanceId'>
        /// The activity instance id of the historic detail.
        /// </param>
        /// <param name='taskId'>
        /// The task id of the historic detail.
        /// </param>
        /// <param name='selectOnlyFormProperties'>
        /// Indication to only return form properties in the result.
        /// </param>
        /// <param name='selectOnlyVariableUpdates'>
        /// Indication to only return variable updates in the result.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetHistoricDetailInfoWithHttpMessagesAsync(string id = default(string), string processInstanceId = default(string), string executionId = default(string), string activityInstanceId = default(string), string taskId = default(string), bool? selectOnlyFormProperties = default(bool?), bool? selectOnlyVariableUpdates = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a historic detail variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When
        /// the variable is of type binary, the content-type of the response is
        /// set to application/octet-stream, regardless of the content of the
        /// variable or the request accept-type header. In case of
        /// serializable, application/x-java-serialized-object is used as
        /// content-type.
        /// </remarks>
        /// <param name='detailId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetHistoricDetailVariableDataWithHttpMessagesAsync(string detailId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of historic process instances
        /// </summary>
        /// <param name='processInstanceId'>
        /// An id of the historic process instance.
        /// </param>
        /// <param name='processDefinitionKey'>
        /// The process definition key of the historic process instance.
        /// </param>
        /// <param name='processDefinitionId'>
        /// The process definition id of the historic process instance.
        /// </param>
        /// <param name='businessKey'>
        /// The business key of the historic process instance.
        /// </param>
        /// <param name='involvedUser'>
        /// An involved user of the historic process instance.
        /// </param>
        /// <param name='finished'>
        /// Indication if the historic process instance is finished.
        /// </param>
        /// <param name='superProcessInstanceId'>
        /// An optional parent process id of the historic process instance.
        /// </param>
        /// <param name='excludeSubprocesses'>
        /// Return only historic process instances which arenï¿½t sub processes.
        /// </param>
        /// <param name='finishedAfter'>
        /// Return only historic process instances that were finished after
        /// this date.
        /// </param>
        /// <param name='finishedBefore'>
        /// Return only historic process instances that were finished before
        /// this date.
        /// </param>
        /// <param name='startedAfter'>
        /// Return only historic process instances that were started after this
        /// date.
        /// </param>
        /// <param name='startedBefore'>
        /// Return only historic process instances that were started before
        /// this date.
        /// </param>
        /// <param name='startedBy'>
        /// Return only historic process instances that were started by this
        /// user.
        /// </param>
        /// <param name='includeProcessVariables'>
        /// An indication if the historic process instance variables should be
        /// returned as well.
        /// </param>
        /// <param name='tenantId'>
        /// Only return instances with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return instances with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns instances without a tenantId set. If false,
        /// the withoutTenantId parameter is ignored.
        ///
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListHistoricProcessInstancesWithHttpMessagesAsync(string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? finished = default(bool?), string superProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), string finishedAfter = default(string), string finishedBefore = default(string), string startedAfter = default(string), string startedBefore = default(string), string startedBy = default(string), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<HistoricProcessInstanceResponse>> GetHistoricProcessInstanceWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteHitoricProcessInstanceWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all comments on a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to get the comments for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CommentResponse>>> GetCommentsWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new comment on a historic process instance
        /// </summary>
        /// <remarks>
        /// Parameter saveProcessInstanceId is optional, if true save process
        /// instance id of task with comment.
        /// </remarks>
        /// <param name="processInstanceId"></param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CommentResponse>> CreateCommentWithHttpMessagesAsync(string processInstanceId, CommentResponse body = default(CommentResponse), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a comment on a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the historic process instance to get the comment for.
        /// </param>
        /// <param name='commentId'>
        /// The id of the comment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CommentResponse>> GetCommentWithHttpMessagesAsync(string processInstanceId, string commentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a comment on a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the historic process instance to delete the comment for.
        /// </param>
        /// <param name='commentId'>
        /// The id of the comment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteCommentWithHttpMessagesAsync(string processInstanceId, string commentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the identity links of a historic process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<HistoricIdentityLinkResponse>>> GetProcessIdentityLinksWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a historic process instance variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When
        /// the variable is of type binary, the content-type of the response is
        /// set to application/octet-stream, regardless of the content of the
        /// variable or the request accept-type header. In case of
        /// serializable, application/x-java-serialized-object is used as
        /// content-type.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetHistoricProcessInstanceVariableDataWithHttpMessagesAsync(string processInstanceId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get historic task instances
        /// </summary>
        /// <param name='taskId'>
        /// An id of the historic task instance.
        /// </param>
        /// <param name='processInstanceId'>
        /// The process instance id of the historic task instance.
        /// </param>
        /// <param name='processDefinitionKey'>
        /// The process definition key of the historic task instance.
        /// </param>
        /// <param name='processDefinitionKeyLike'>
        /// The process definition key of the historic task instance, which
        /// matches the given value.
        /// </param>
        /// <param name='processDefinitionId'>
        /// The process definition id of the historic task instance.
        /// </param>
        /// <param name='processDefinitionName'>
        /// The process definition name of the historic task instance.
        /// </param>
        /// <param name='processDefinitionNameLike'>
        /// The process definition name of the historic task instance, which
        /// matches the given value.
        /// </param>
        /// <param name='processBusinessKey'>
        /// The process instance business key of the historic task instance.
        /// </param>
        /// <param name='processBusinessKeyLike'>
        /// The process instance business key of the historic task instance
        /// that matches the given value.
        /// </param>
        /// <param name='executionId'>
        /// The execution id of the historic task instance.
        /// </param>
        /// <param name='taskDefinitionKey'>
        /// The task definition key for tasks part of a process
        /// </param>
        /// <param name='taskName'>
        /// The task name of the historic task instance.
        /// </param>
        /// <param name='taskNameLike'>
        /// The task name with like operator for the historic task instance.
        /// </param>
        /// <param name='taskDescription'>
        /// The task description of the historic task instance.
        /// </param>
        /// <param name='taskDescriptionLike'>
        /// The task description with like operator for the historic task
        /// instance.
        /// </param>
        /// <param name='taskCategory'>
        /// Select tasks with the given category. Note that this is the task
        /// category, not the category of the process definition (namespace
        /// within the BPMN Xml).
        /// </param>
        /// <param name='taskDeleteReason'>
        /// The task delete reason of the historic task instance.
        /// </param>
        /// <param name='taskDeleteReasonLike'>
        /// The task delete reason with like operator for the historic task
        /// instance.
        /// </param>
        /// <param name='taskAssignee'>
        /// The assignee of the historic task instance.
        /// </param>
        /// <param name='taskAssigneeLike'>
        /// The assignee with like operator for the historic task instance.
        /// </param>
        /// <param name='taskOwner'>
        /// The owner of the historic task instance.
        /// </param>
        /// <param name='taskOwnerLike'>
        /// The owner with like operator for the historic task instance.
        /// </param>
        /// <param name='taskInvolvedUser'>
        /// An involved user of the historic task instance
        /// </param>
        /// <param name='taskPriority'>
        /// The priority of the historic task instance.
        /// </param>
        /// <param name='finished'>
        /// Indication if the historic task instance is finished.
        /// </param>
        /// <param name='processFinished'>
        /// Indication if the process instance of the historic task instance is
        /// finished.
        /// </param>
        /// <param name='parentTaskId'>
        /// An optional parent task id of the historic task instance.
        /// </param>
        /// <param name='dueDate'>
        /// Return only historic task instances that have a due date equal this
        /// date.
        /// </param>
        /// <param name='dueDateAfter'>
        /// Return only historic task instances that have a due date after this
        /// date.
        /// </param>
        /// <param name='dueDateBefore'>
        /// Return only historic task instances that have a due date before
        /// this date.
        /// </param>
        /// <param name='withoutDueDate'>
        /// Return only historic task instances that have no due-date. When
        /// false is provided as value, this parameter is ignored.
        /// </param>
        /// <param name='taskCompletedOn'>
        /// Return only historic task instances that have been completed on
        /// this date.
        /// </param>
        /// <param name='taskCompletedAfter'>
        /// Return only historic task instances that have been completed after
        /// this date.
        /// </param>
        /// <param name='taskCompletedBefore'>
        /// Return only historic task instances that have been completed before
        /// this date.
        /// </param>
        /// <param name='taskCreatedOn'>
        /// Return only historic task instances that were created on this date.
        /// </param>
        /// <param name='taskCreatedBefore'>
        /// Return only historic task instances that were created before this
        /// date.
        /// </param>
        /// <param name='taskCreatedAfter'>
        /// Return only historic task instances that were created after this
        /// date.
        /// </param>
        /// <param name='includeTaskLocalVariables'>
        /// An indication if the historic task instance local variables should
        /// be returned as well.
        /// </param>
        /// <param name='includeProcessVariables'>
        /// An indication if the historic task instance global variables should
        /// be returned as well.
        /// </param>
        /// <param name='tenantId'>
        /// Only return historic task instances with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return historic task instances with a tenantId like the given
        /// value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns historic task instances without a tenantId
        /// set. If false, the withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListHistoricTaskInstancesWithHttpMessagesAsync(string taskId = default(string), string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processBusinessKey = default(string), string processBusinessKeyLike = default(string), string executionId = default(string), string taskDefinitionKey = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskCategory = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), string taskInvolvedUser = default(string), string taskPriority = default(string), bool? finished = default(bool?), bool? processFinished = default(bool?), string parentTaskId = default(string), string dueDate = default(string), string dueDateAfter = default(string), string dueDateBefore = default(string), bool? withoutDueDate = default(bool?), string taskCompletedOn = default(string), string taskCompletedAfter = default(string), string taskCompletedBefore = default(string), string taskCreatedOn = default(string), string taskCreatedBefore = default(string), string taskCreatedAfter = default(string), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single historic task instance
        /// </summary>
        /// <param name='taskId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<HistoricTaskInstanceResponse>> GetTaskInstanceWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a historic task instance
        /// </summary>
        /// <param name='taskId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTaskInstanceWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the identity links of a historic task instance
        /// </summary>
        /// <param name='taskId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<HistoricIdentityLinkResponse>>> GetTaskIdentityLinksWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a historic task instance variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When
        /// the variable is of type binary, the content-type of the response is
        /// set to application/octet-stream, regardless of the content of the
        /// variable or the request accept-type header. In case of
        /// serializable, application/x-java-serialized-object is used as
        /// content-type.
        /// </remarks>
        /// <param name='taskId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetHistoricTaskInstanceVariableDataWithHttpMessagesAsync(string taskId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of historic variable instances
        /// </summary>
        /// <param name='processInstanceId'>
        /// The process instance id of the historic variable instance.
        /// </param>
        /// <param name='taskId'>
        /// The task id of the historic variable instance.
        /// </param>
        /// <param name='excludeTaskVariables'>
        /// Indication to exclude the task variables from the result.
        /// </param>
        /// <param name='variableName'>
        /// The variable name of the historic variable instance.
        /// </param>
        /// <param name='variableNameLike'>
        /// The variable name using the like operator for the historic variable
        /// instance.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetHistoricVariableInstancesWithHttpMessagesAsync(string processInstanceId = default(string), string taskId = default(string), bool? excludeTaskVariables = default(bool?), string variableName = default(string), string variableNameLike = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a historic task instance variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When
        /// the variable is of type binary, the content-type of the response is
        /// set to application/octet-stream, regardless of the content of the
        /// variable or the request accept-type header. In case of
        /// serializable, application/x-java-serialized-object is used as
        /// content-type.
        /// </remarks>
        /// <param name='varInstanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetHistoricInstanceVariableDataWithHttpMessagesAsync(string varInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of groups
        /// </summary>
        /// <param name='id'>
        /// Only return group with the given id
        /// </param>
        /// <param name='name'>
        /// Only return groups with the given name
        /// </param>
        /// <param name='type'>
        /// Only return groups with the given type
        /// </param>
        /// <param name='nameLike'>
        /// Only return groups with a name like the given value. Use % as
        /// wildcard-character.
        /// </param>
        /// <param name='member'>
        /// Only return groups which have a member with the given username.
        /// </param>
        /// <param name='potentialStarter'>
        /// Only return groups which members are potential starters for a
        /// process-definition with the given id.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'name', 'type'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetGroupsWithHttpMessagesAsync(string id = default(string), string name = default(string), string type = default(string), string nameLike = default(string), string member = default(string), string potentialStarter = default(string), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a group
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GroupResponse>> CreateGroupWithHttpMessagesAsync(GroupRequest body = default(GroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single group
        /// </summary>
        /// <param name='groupId'>
        /// The id of the group to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GroupResponse>> GetGroupWithHttpMessagesAsync(string groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a group
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include
        /// the name attribute in the request body JSON-object, only updating
        /// the name of the group, leaving all other fields unaffected. When an
        /// attribute is explicitly included and is set to null, the
        /// group-value will be updated to null.
        /// </remarks>
        /// <param name='groupId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GroupResponse>> UpdateGroupWithHttpMessagesAsync(string groupId, GroupRequest body = default(GroupRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a group
        /// </summary>
        /// <param name='groupId'>
        /// The id of the group to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteGroupWithHttpMessagesAsync(string groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a member to a group
        /// </summary>
        /// <param name='groupId'>
        /// The id of the group to add a member to.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<MembershipResponse>> CreateMembershipWithHttpMessagesAsync(string groupId, MembershipRequest body = default(MembershipRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a member from a group
        /// </summary>
        /// <param name='groupId'>
        /// The id of the group to remove a member from.
        /// </param>
        /// <param name='userId'>
        /// The id of the user to remove.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteMembershipWithHttpMessagesAsync(string groupId, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <param name='id'>
        /// Only return group with the given id
        /// </param>
        /// <param name='firstName'>
        /// Only return users with the given firstname
        /// </param>
        /// <param name='lastName'>
        /// Only return users with the given lastname
        /// </param>
        /// <param name='email'>
        /// Only return users with the given email
        /// </param>
        /// <param name='firstNameLike'>
        /// Only return userswith a firstname like the given value. Use % as
        /// wildcard-character.
        /// </param>
        /// <param name='lastNameLike'>
        /// Only return users with a lastname like the given value. Use % as
        /// wildcard-character.
        /// </param>
        /// <param name='emailLike'>
        /// Only return users with an email like the given value. Use % as
        /// wildcard-character.
        /// </param>
        /// <param name='memberOfGroup'>
        /// Only return users which are a member of the given group.
        /// </param>
        /// <param name='potentialStarter'>
        /// Only return users  which members are potential starters for a
        /// process-definition with the given id.
        /// </param>
        /// <param name='sort'>
        /// Field  to sort on, to be used together with the order. Possible
        /// values include: 'id', 'firstName', 'lastname', 'email'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetUsersWithHttpMessagesAsync(string id = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string firstNameLike = default(string), string lastNameLike = default(string), string emailLike = default(string), string memberOfGroup = default(string), string potentialStarter = default(string), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a user
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserResponse>> CreateUserWithHttpMessagesAsync(UserRequest body = default(UserRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single user
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserResponse>> GetUserWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include
        /// the firstName attribute in the request body JSON-object, only
        /// updating the firstName of the user, leaving all other fields
        /// unaffected. When an attribute is explicitly included and is set to
        /// null, the user-value will be updated to null. Example: {"firstName"
        /// : null} will clear the firstName of the user).
        /// </remarks>
        /// <param name='userId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserResponse>> UpdateUserWithHttpMessagesAsync(string userId, UserRequest body = default(UserRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List a userï¿½s info
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to get the info for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<UserInfoResponse>>> ListUsersInfoWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new userï¿½s info entry
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to create the info for.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserInfoResponse>> CreateUserInfoWithHttpMessagesAsync(string userId, UserInfoRequest body = default(UserInfoRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a userï¿½s info
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to get the info for.
        /// </param>
        /// <param name='key'>
        /// The key of the user info to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserInfoResponse>> GetUserInfoWithHttpMessagesAsync(string userId, string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a userï¿½s info
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to update the info for.
        /// </param>
        /// <param name='key'>
        /// The key of the user info to update.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UserInfoResponse>> UpdateUserInfoWithHttpMessagesAsync(string userId, string key, UserInfoRequest body = default(UserInfoRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a userï¿½s info
        /// </summary>
        /// <param name='userId'>
        /// The id of the user to delete the info for.
        /// </param>
        /// <param name='key'>
        /// The key of the user info to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteUserInfoWithHttpMessagesAsync(string userId, string key, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a userï¿½s picture
        /// </summary>
        /// <remarks>
        /// The response body contains the raw picture data, representing the
        /// userï¿½s picture. The Content-type of the response corresponds to the
        /// mimeType that was set when creating the picture.
        /// </remarks>
        /// <param name='userId'>
        /// The id of the user to get the picture for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetUserPictureWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updating a userï¿½s picture
        /// </summary>
        /// <remarks>
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the picture.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// mimeType: Optional mime-type for the uploaded picture. If omitted,
        /// the default of image/jpeg is used as a mime-type for the picture.
        /// </remarks>
        /// <param name='userId'>
        /// The id of the user to get the picture for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateUserPictureWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of deadletter jobs
        /// </summary>
        /// <param name='id'>
        /// Only return job with the given id
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return jobs part of a process with the given id
        /// </param>
        /// <param name='executionId'>
        /// Only return jobs part of an execution with the given id
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return jobs with the given process definition id
        /// </param>
        /// <param name='timersOnly'>
        /// If true, only return jobs which are timers. If false, this
        /// parameter is ignored. Cannot be used together with 'messagesOnly'.
        /// </param>
        /// <param name='messagesOnly'>
        /// If true, only return jobs which are messages. If false, this
        /// parameter is ignored. Cannot be used together with 'timersOnly'
        /// </param>
        /// <param name='withException'>
        /// If true, only return jobs for which an exception occurred while
        /// executing it. If false, this parameter is ignored.
        /// </param>
        /// <param name='dueBefore'>
        /// Only return jobs which are due to be executed before the given
        /// date. Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='dueAfter'>
        /// Only return jobs which are due to be executed after the given date.
        /// Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='exceptionMessage'>
        /// Only return jobs with the given exception message
        /// </param>
        /// <param name='tenantId'>
        /// Only return jobs with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return jobs with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns jobs without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='locked'>
        /// If true, only return jobs which are locked.  If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='unlocked'>
        /// If true, only return jobs which are unlocked. If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'dueDate', 'executionId',
        /// 'processInstanceId', 'retries', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListDeadLetterJobsWithHttpMessagesAsync(string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single deadletter job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<JobResponse>> GetDeadletterJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a deadletter job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteDeadLetterJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the exception stacktrace for a deadletter job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetDeadLetterJobStacktraceWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get engine info
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessEngineInfoResponse>> GetEngineInfoWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of jobs
        /// </summary>
        /// <param name='id'>
        /// Only return job with the given id
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return jobs part of a process with the given id
        /// </param>
        /// <param name='executionId'>
        /// Only return jobs part of an execution with the given id
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return jobs with the given process definition id
        /// </param>
        /// <param name='timersOnly'>
        /// If true, only return jobs which are timers. If false, this
        /// parameter is ignored. Cannot be used together with 'messagesOnly'.
        /// </param>
        /// <param name='messagesOnly'>
        /// If true, only return jobs which are messages. If false, this
        /// parameter is ignored. Cannot be used together with 'timersOnly'
        /// </param>
        /// <param name='withException'>
        /// If true, only return jobs for which an exception occurred while
        /// executing it. If false, this parameter is ignored.
        /// </param>
        /// <param name='dueBefore'>
        /// Only return jobs which are due to be executed before the given
        /// date. Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='dueAfter'>
        /// Only return jobs which are due to be executed after the given date.
        /// Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='exceptionMessage'>
        /// Only return jobs with the given exception message
        /// </param>
        /// <param name='tenantId'>
        /// Only return jobs with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return jobs with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns jobs without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='locked'>
        /// If true, only return jobs which are locked.  If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='unlocked'>
        /// If true, only return jobs which are unlocked. If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'dueDate', 'executionId',
        /// 'processInstanceId', 'retries', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListJobsWithHttpMessagesAsync(string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single job
        /// </summary>
        /// <param name='jobId'>
        /// The id of the job to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<JobResponse>> GetJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute a single job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='actionRequest'>
        /// Action to perform. Only execute is supported.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExecuteJobActionWithHttpMessagesAsync(string jobId, RestActionRequest actionRequest = default(RestActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a job
        /// </summary>
        /// <param name='jobId'>
        /// The id of the job to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the exception stacktrace for a job
        /// </summary>
        /// <param name='jobId'>
        /// Id of the job to get the stacktrace for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetJobStacktraceWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get engine properties
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IDictionary<string, string>>> GetPropertiesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of suspended jobs
        /// </summary>
        /// <param name='id'>
        /// Only return job with the given id
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return jobs part of a process with the given id
        /// </param>
        /// <param name='executionId'>
        /// Only return jobs part of an execution with the given id
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return jobs with the given process definition id
        /// </param>
        /// <param name='timersOnly'>
        /// If true, only return jobs which are timers. If false, this
        /// parameter is ignored. Cannot be used together with 'messagesOnly'.
        /// </param>
        /// <param name='messagesOnly'>
        /// If true, only return jobs which are messages. If false, this
        /// parameter is ignored. Cannot be used together with 'timersOnly'
        /// </param>
        /// <param name='withException'>
        /// If true, only return jobs for which an exception occurred while
        /// executing it. If false, this parameter is ignored.
        /// </param>
        /// <param name='dueBefore'>
        /// Only return jobs which are due to be executed before the given
        /// date. Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='dueAfter'>
        /// Only return jobs which are due to be executed after the given date.
        /// Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='exceptionMessage'>
        /// Only return jobs with the given exception message
        /// </param>
        /// <param name='tenantId'>
        /// Only return jobs with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return jobs with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns jobs without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='locked'>
        /// If true, only return jobs which are locked.  If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='unlocked'>
        /// If true, only return jobs which are unlocked. If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'dueDate', 'executionId',
        /// 'processInstanceId', 'retries', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListSuspendedJobsWithHttpMessagesAsync(string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single suspended job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<JobResponse>> GetSuspendedJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the exception stacktrace for a suspended job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetSuspendedJobStacktraceWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of tables
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TableResponse>>> GetTablesWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single table
        /// </summary>
        /// <param name='tableName'>
        /// The name of the table to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TableResponse>> GetTableWithHttpMessagesAsync(string tableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get column info for a single table
        /// </summary>
        /// <param name='tableName'>
        /// The name of the table to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TableMetaData>> GetTableMetaDataWithHttpMessagesAsync(string tableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get row data for a single table
        /// </summary>
        /// <param name='tableName'>
        /// The name of the table to get.
        /// </param>
        /// <param name='start'>
        /// Index of the first row to fetch. Defaults to 0.
        /// </param>
        /// <param name='size'>
        /// Number of rows to fetch, starting from start. Defaults to 10.
        /// </param>
        /// <param name='orderAscendingColumn'>
        /// Name of the column to sort the resulting rows on, ascending.
        /// </param>
        /// <param name='orderDescendingColumn'>
        /// Name of the column to sort the resulting rows on, descending.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetTableDataWithHttpMessagesAsync(string tableName, int? start = default(int?), int? size = default(int?), string orderAscendingColumn = default(string), string orderDescendingColumn = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of timer jobs
        /// </summary>
        /// <param name='id'>
        /// Only return job with the given id
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return jobs part of a process with the given id
        /// </param>
        /// <param name='executionId'>
        /// Only return jobs part of an execution with the given id
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return jobs with the given process definition id
        /// </param>
        /// <param name='timersOnly'>
        /// If true, only return jobs which are timers. If false, this
        /// parameter is ignored. Cannot be used together with 'messagesOnly'.
        /// </param>
        /// <param name='messagesOnly'>
        /// If true, only return jobs which are messages. If false, this
        /// parameter is ignored. Cannot be used together with 'timersOnly'
        /// </param>
        /// <param name='withException'>
        /// If true, only return jobs for which an exception occurred while
        /// executing it. If false, this parameter is ignored.
        /// </param>
        /// <param name='dueBefore'>
        /// Only return jobs which are due to be executed before the given
        /// date. Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='dueAfter'>
        /// Only return jobs which are due to be executed after the given date.
        /// Jobs without duedate are never returned using this parameter.
        /// </param>
        /// <param name='exceptionMessage'>
        /// Only return jobs with the given exception message
        /// </param>
        /// <param name='tenantId'>
        /// Only return jobs with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return jobs with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns jobs without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='locked'>
        /// If true, only return jobs which are locked.  If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='unlocked'>
        /// If true, only return jobs which are unlocked. If false, this
        /// parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'dueDate', 'executionId',
        /// 'processInstanceId', 'retries', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> ListTimerJobsWithHttpMessagesAsync(string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single timer job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<JobResponse>> GetTimerJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a timer job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTimerJobWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the exception stacktrace for a timer job
        /// </summary>
        /// <param name='jobId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> GetTimerJobStacktraceWithHttpMessagesAsync(string jobId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query executions
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used
        /// in the List executions URL query. On top of these, itï¿½s possible to
        /// provide an array of variables and processInstanceVariables to
        /// include in the query, with their format described here.
        ///
        /// The general paging and sorting query-parameters can be used for
        /// this URL.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryExecutionsWithHttpMessagesAsync(ExecutionQueryRequest body = default(ExecutionQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for historic activity instances
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of historic task
        /// instances, but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryActivityInstancesWithHttpMessagesAsync(HistoricActivityInstanceQueryRequest body = default(HistoricActivityInstanceQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for historic details
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of historic process
        /// instances, but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryHistoricDetailWithHttpMessagesAsync(HistoricDetailQueryRequest body = default(HistoricDetailQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for historic process instances
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of historic process
        /// instances, but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long. On top of that, the
        /// query allows for filtering based on process variables. The
        /// variables property is a JSON-array containing objects with the
        /// format as described here.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryHistoricProcessInstanceWithHttpMessagesAsync(HistoricProcessInstanceQueryRequest body = default(HistoricProcessInstanceQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for historic task instances
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of historic task
        /// instances, but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long. On top of that, the
        /// query allows for filtering based on process variables. The
        /// taskVariables and processVariables properties are JSON-arrays
        /// containing objects with the format as described here.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryHistoricTaskInstanceWithHttpMessagesAsync(HistoricTaskInstanceQueryRequest body = default(HistoricTaskInstanceQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for historic variable instances
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of historic process
        /// instances, but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long. On top of that, the
        /// query allows for filtering based on process variables. The
        /// variables property is a JSON-array containing objects with the
        /// format as described here.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryVariableInstancesWithHttpMessagesAsync(HistoricVariableInstanceQueryRequest body = default(HistoricVariableInstanceQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query process instances
        /// </summary>
        /// <remarks>
        /// The request body can contain all possible filters that can be used
        /// in the List process instances URL query. On top of these, itï¿½s
        /// possible to provide an array of variables to include in the query,
        /// with their format described here.
        ///
        /// The general paging and sorting query-parameters can be used for
        /// this URL.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> QueryProcessInstancesWithHttpMessagesAsync(ProcessInstanceQueryRequest body = default(ProcessInstanceQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for tasks
        /// </summary>
        /// <remarks>
        /// All supported JSON parameter fields allowed are exactly the same as
        /// the parameters found for getting a collection of tasks (except for
        /// candidateGroupIn which is only available in this POST task query
        /// REST service), but passed in as JSON-body arguments rather than
        /// URL-parameters to allow for more advanced querying and preventing
        /// errors with request-uriï¿½s that are too long. On top of that, the
        /// query allows for filtering based on task and process variables. The
        /// taskVariables and processInstanceVariables are both JSON-arrays
        /// containing objects with the format as described here.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetQueryResultWithHttpMessagesAsync(TaskQueryRequest body = default(TaskQueryRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of Deployments
        /// </summary>
        /// <param name='name'>
        /// Only return deployments with the given name.
        /// </param>
        /// <param name='nameLike'>
        /// Only return deployments with a name like the given name.
        /// </param>
        /// <param name='category'>
        /// Only return deployments with the given category.
        /// </param>
        /// <param name='categoryNotEquals'>
        /// Only return deployments which donï¿½t have the given category.
        /// </param>
        /// <param name='tenantId'>
        /// Only return deployments with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return deployments with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns deployments without a tenantId set. If false,
        /// the withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'name', 'deployTime', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetDeploymentsWithHttpMessagesAsync(string name = default(string), string nameLike = default(string), string category = default(string), string categoryNotEquals = default(string), string tenantId = default(string), string tenantIdLike = default(string), string withoutTenantId = default(string), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new deployment
        /// </summary>
        /// <remarks>
        /// The request body should contain data of type multipart/form-data.
        /// There should be exactly one file in the request, any additional
        /// files will be ignored. If multiple resources need to be deployed in
        /// a single deployment, compress the resources in a zip and make sure
        /// the file-name ends with .bar or .zip.
        ///
        /// An additional parameter (form-field) can be passed in the request
        /// body with name tenantId. The value of this field will be used as
        /// the id of the tenant this deployment is done in.
        /// </remarks>
        /// <param name='tenantId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeploymentResponse>> UploadDeploymentWithHttpMessagesAsync(string tenantId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a deployment
        /// </summary>
        /// <param name='deploymentId'>
        /// The id of the deployment to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeploymentResponse>> GetDeploymentWithHttpMessagesAsync(string deploymentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a deployment
        /// </summary>
        /// <param name='deploymentId'>
        /// The id of the deployment to delete.
        /// </param>
        /// <param name='cascade'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteDeploymentWithHttpMessagesAsync(string deploymentId, bool? cascade = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a deployment resource content
        /// </summary>
        /// <remarks>
        /// The response body will contain the binary resource-content for the
        /// requested resource. The response content-type will be the same as
        /// the type returned in the resources mimeType property. Also, a
        /// content-disposition header is set, allowing browsers to download
        /// the file instead of displaying it.
        /// </remarks>
        /// <param name='deploymentId'>
        /// The id of the deployment the requested resource is part of.
        /// </param>
        /// <param name='resourceId'>
        /// The id of the resource to get the data for. Make sure you
        /// URL-encode the resourceId in case it contains forward slashes. Eg:
        /// use diagrams%2Fmy-process.bpmn20.xml instead of
        /// diagrams/Fmy-process.bpmn20.xml.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetDeploymentResourceDataWithHttpMessagesAsync(string deploymentId, string resourceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List resources in a deployment
        /// </summary>
        /// <remarks>
        /// The dataUrl property in the resulting JSON for a single resource
        /// contains the actual URL to use for retrieving the binary resource.
        /// </remarks>
        /// <param name='deploymentId'>
        /// The id of the deployment to get the resources for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<DeploymentResourceResponse>>> GetDeploymentResourcesWithHttpMessagesAsync(string deploymentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a deployment resource
        /// </summary>
        /// <remarks>
        /// Replace ** by ResourceId
        /// </remarks>
        /// <param name='deploymentId'>
        /// The id of the deployment the requested resource is part of.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DeploymentResourceResponse>> GetDeploymentResourceWithHttpMessagesAsync(string deploymentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a list of models
        /// </summary>
        /// <param name='id'>
        /// Only return models with the given version.
        /// </param>
        /// <param name='category'>
        /// Only return models with the given category.
        /// </param>
        /// <param name='categoryLike'>
        /// Only return models with a category like the given name.
        /// </param>
        /// <param name='categoryNotEquals'>
        /// Only return models which donï¿½t have the given category.
        /// </param>
        /// <param name='name'>
        /// Only return models with the given name.
        /// </param>
        /// <param name='nameLike'>
        /// Only return models with a name like the given name.
        /// </param>
        /// <param name='key'>
        /// Only return models with the given key.
        /// </param>
        /// <param name='deploymentId'>
        /// Only return models with the given category.
        /// </param>
        /// <param name='version'>
        /// Only return models with the given version.
        /// </param>
        /// <param name='latestVersion'>
        /// If true, only return models which are the latest version. Best used
        /// in combination with key. If false is passed in as value, this is
        /// ignored and all versions are returned.
        /// </param>
        /// <param name='deployed'>
        /// If true, only deployed models are returned. If false, only
        /// undeployed models are returned (deploymentId is null).
        /// </param>
        /// <param name='tenantId'>
        /// Only return models with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return models with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns models without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'category', 'createTime', 'key',
        /// 'lastUpdateTime', 'name', 'version', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetModelsWithHttpMessagesAsync(string id = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string name = default(string), string nameLike = default(string), string key = default(string), string deploymentId = default(string), int? version = default(int?), bool? latestVersion = default(bool?), bool? deployed = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include
        /// the name attribute in the request body JSON-object, only setting
        /// the name of the model, leaving all other fields null.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ModelResponse>> CreateModelWithHttpMessagesAsync(ModelRequest body = default(ModelRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a model
        /// </summary>
        /// <param name='modelId'>
        /// The id of the model to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ModelResponse>> GetModelWithHttpMessagesAsync(string modelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a model
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include
        /// the name attribute in the request body JSON-object, only updating
        /// the name of the model, leaving all other fields unaffected. When an
        /// attribute is explicitly included and is set to null, the
        /// model-value will be updated to null. Example: ```JSON
        /// {"metaInfo" : null}``` will clear the metaInfo of the model).
        /// </remarks>
        /// <param name='modelId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ModelResponse>> UpdateModelWithHttpMessagesAsync(string modelId, ModelRequest body = default(ModelRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a model
        /// </summary>
        /// <param name='modelId'>
        /// The id of the model to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteModelWithHttpMessagesAsync(string modelId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of process definitions
        /// </summary>
        /// <param name='version'>
        /// Only return process definitions with the given version.
        /// </param>
        /// <param name='name'>
        /// Only return process definitions with the given name.
        /// </param>
        /// <param name='nameLike'>
        /// Only return process definitions with a name like the given name.
        /// </param>
        /// <param name='key'>
        /// Only return process definitions with the given key.
        /// </param>
        /// <param name='keyLike'>
        /// Only return process definitions with a name like the given key.
        /// </param>
        /// <param name='resourceName'>
        /// Only return process definitions with the given resource name.
        /// </param>
        /// <param name='resourceNameLike'>
        /// Only return process definitions with a name like the given resource
        /// name.
        /// </param>
        /// <param name='category'>
        /// Only return process definitions with the given category.
        /// </param>
        /// <param name='categoryLike'>
        /// Only return process definitions with a category like the given
        /// name.
        /// </param>
        /// <param name='categoryNotEquals'>
        /// Only return process definitions which donï¿½t have the given
        /// category.
        /// </param>
        /// <param name='deploymentId'>
        /// Only return process definitions with the given category.
        /// </param>
        /// <param name='startableByUser'>
        /// Only return process definitions which are part of a deployment with
        /// the given id.
        /// </param>
        /// <param name='latest'>
        /// Only return the latest process definition versions. Can only be
        /// used together with key and keyLike parameters, using any other
        /// parameter will result in a 400-response.
        /// </param>
        /// <param name='suspended'>
        /// If true, only returns process definitions which are suspended. If
        /// false, only active process definitions (which are not suspended)
        /// are returned.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'name', 'id', 'key', 'category', 'deploymentId',
        /// 'version'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetProcessDefinitionsWithHttpMessagesAsync(int? version = default(int?), string name = default(string), string nameLike = default(string), string key = default(string), string keyLike = default(string), string resourceName = default(string), string resourceNameLike = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string deploymentId = default(string), string startableByUser = default(string), bool? latest = default(bool?), bool? suspended = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a process definition
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessDefinitionResponse>> GetProcessDefinitionWithHttpMessagesAsync(string processDefinitionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute actions for a process definition (Update category, Suspend
        /// or Activate)
        /// </summary>
        /// <remarks>
        /// ## Update category for a process definition
        ///
        /// ```JSON
        /// {
        /// "category" : "updatedcategory"
        /// } ```
        ///
        ///
        /// ## Suspend a process definition
        ///
        /// ```JSON
        /// {
        /// "action" : "suspend",
        /// "includeProcessInstances" : "false",
        /// "date" : "2013-04-15T00:42:12Z"
        /// } ```
        ///
        ///
        /// ## Activate a process definition
        ///
        /// ```JSON
        /// {
        /// "action" : "activate",
        /// "includeProcessInstances" : "true",
        /// "date" : "2013-04-15T00:42:12Z"
        /// } ```
        /// </remarks>
        /// <param name='processDefinitionId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessDefinitionResponse>> ExecuteProcessDefinitionActionWithHttpMessagesAsync(string processDefinitionId, ProcessDefinitionActionRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all candidate starters for a process-definition
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition to get the identity links for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestIdentityLink>>> GetIdentityLinksWithHttpMessagesAsync(string processDefinitionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add a candidate starter to a process definition
        /// </summary>
        /// <remarks>
        /// ## For a User
        ///
        /// ```JSON
        /// {
        /// "user" : "kermit"
        /// } ```
        ///
        /// ## For a Group
        ///
        /// ```JSON
        /// {
        /// "groupId" : "sales"
        /// } ```
        /// </remarks>
        /// <param name='processDefinitionId'>
        /// The id of the process definition.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> CreateIdentityLinkWithHttpMessagesAsync(string processDefinitionId, RestIdentityLink body = default(RestIdentityLink), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a candidate starter from a process definition
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition.
        /// </param>
        /// <param name='family'>
        /// Either users or groups, depending on the type of identity link.
        /// </param>
        /// <param name='identityId'>
        /// Either the user or group of the identity to get as candidate
        /// starter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> GetIdentityLinkWithHttpMessagesAsync(string processDefinitionId, string family, string identityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a candidate starter from a process definition
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition.
        /// </param>
        /// <param name='family'>
        /// Either users or groups, depending on the type of identity link.
        /// </param>
        /// <param name='identityId'>
        /// Either the user or group of the identity to remove as candidate
        /// starter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteIdentityLinkWithHttpMessagesAsync(string processDefinitionId, string family, string identityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a process definition image
        /// </summary>
        /// <param name='processDefinitionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetModelResourceWithHttpMessagesAsync(string processDefinitionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a process definition BPMN model
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition to get the model for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BpmnModel>> GetBpmnModelResourceWithHttpMessagesAsync(string processDefinitionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a process definition resource content
        /// </summary>
        /// <param name='processDefinitionId'>
        /// The id of the process definition to get the resource data for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetProcessDefinitionResourceWithHttpMessagesAsync(string processDefinitionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of executions
        /// </summary>
        /// <param name='id'>
        /// Only return models with the given version.
        /// </param>
        /// <param name='activityId'>
        /// Only return executions with the given activity id.
        /// </param>
        /// <param name='processDefinitionKey'>
        /// Only return process instances with the given process definition
        /// key.
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return process instances with the given process definition id.
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return executions which are part of the process instance with
        /// the given id.
        /// </param>
        /// <param name='messageEventSubscriptionName'>
        /// Only return executions which are subscribed to a message with the
        /// given name.
        /// </param>
        /// <param name='signalEventSubscriptionName'>
        /// Only return executions which are subscribed to a signal with the
        /// given name.
        /// </param>
        /// <param name='parentId'>
        /// Only return executions which are a direct child of the given
        /// execution.
        /// </param>
        /// <param name='tenantId'>
        /// Only return process instances with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return process instances with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns process instances without a tenantId set. If
        /// false, the withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'processInstanceId', 'processDefinitionId',
        /// 'processDefinitionKey', 'tenantId'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetExecutionsWithHttpMessagesAsync(string id = default(string), string activityId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string processInstanceId = default(string), string messageEventSubscriptionName = default(string), string signalEventSubscriptionName = default(string), string parentId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Signal event received
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExecuteExecutionActionWithHttpMessagesAsync(ExecutionActionRequest body = default(ExecutionActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ExecutionResponse>> GetExecutionWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Execute an action on an execution
        /// </summary>
        /// <remarks>
        /// ## Request body (signal an execution):
        ///
        /// ```JSON
        /// {
        /// "action":"signal"
        /// } ```
        ///
        ///
        /// Both a variables and transientVariables property is accepted with
        /// following structure ```JSON
        /// {
        /// "action":"signal",
        /// "variables" : [
        /// {
        /// "name": "myVar",
        /// "value": "someValue"
        /// }
        /// ]
        /// }```
        ///
        ///
        /// ## Request body (signal event received for execution)
        ///
        /// ```JSON
        /// {
        /// "action":"signal"
        /// } ```
        ///
        ///
        /// Notifies the execution that a signal event has been received,
        /// requires a signalName parameter. Optional variables can be passed
        /// that are set on the execution before the action is executed.##
        /// Request body (signal event received for execution)
        ///
        /// ```JSON
        /// {
        /// "action":"messageEventReceived",
        /// "messageName":"myMessage"
        /// "variables": [  ]
        /// } ```
        ///
        ///
        ///
        /// </remarks>
        /// <param name='executionId'>
        /// The id of the execution to execute action on.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ExecutionResponse>> PerformExecutionActionWithHttpMessagesAsync(string executionId, ExecutionActionRequest body = default(ExecutionActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get active activities in an execution
        /// </summary>
        /// <remarks>
        /// Returns all activities which are active in the execution and in all
        /// child-executions (and their children, recursively), if any.
        /// </remarks>
        /// <param name='executionId'>
        /// The id of the execution to get activities for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<string>>> GetActiveActivitiesWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of variables for an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to the variables for.
        /// </param>
        /// <param name='scope'>
        /// Either local or global. If omitted, both local and global scoped
        /// variables are returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestVariable>>> ListExecutionVariablesWithHttpMessagesAsync(string executionId, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create variables on an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to create the new variable for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateExecutionVariableWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update variables on an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to the variables for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateExecutionVariableWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete all variables for an execution
        /// </summary>
        /// <param name='executionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLocalVariablesWithHttpMessagesAsync(string executionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a variable for an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to the variables for.
        /// </param>
        /// <param name='variableName'>
        /// Name of the variable to get.
        /// </param>
        /// <param name='scope'>
        /// Either local or global. If omitted, local variable is returned (if
        /// exists). If not, a global variable is returned (if exists).
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> GetExecutionVariableWithHttpMessagesAsync(string executionId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a variable on an execution
        /// </summary>
        /// <param name='executionId'>
        /// The id of the execution to create the new variable for.
        /// </param>
        /// <param name='variableName'>
        /// The name of the variable to update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> UpdateExecutionVariableWithHttpMessagesAsync(string executionId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a variable for an execution
        /// </summary>
        /// <param name='executionId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletedExecutionVariableWithHttpMessagesAsync(string executionId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for an execution
        /// </summary>
        /// <param name='executionId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetExecutionVariableDataWithHttpMessagesAsync(string executionId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of process instances
        /// </summary>
        /// <param name='id'>
        /// Only return models with the given version.
        /// </param>
        /// <param name='processDefinitionKey'>
        /// Only return process instances with the given process definition
        /// key.
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return process instances with the given process definition id.
        /// </param>
        /// <param name='businessKey'>
        /// Only return process instances with the given businessKey.
        /// </param>
        /// <param name='involvedUser'>
        /// Only return process instances in which the given user is involved.
        /// </param>
        /// <param name='suspended'>
        /// If true, only return process instance which are suspended. If
        /// false, only return process instances which are not suspended
        /// (active).
        /// </param>
        /// <param name='superProcessInstanceId'>
        /// Only return process instances which have the given super
        /// process-instance id (for processes that have a call-activities).
        /// </param>
        /// <param name='subProcessInstanceId'>
        /// Only return process instances which have the given sub
        /// process-instance id (for processes started as a call-activity).
        /// </param>
        /// <param name='excludeSubprocesses'>
        /// Return only process instances which arenï¿½t sub processes.
        /// </param>
        /// <param name='includeProcessVariables'>
        /// Indication to include process variables in the result.
        /// </param>
        /// <param name='tenantId'>
        /// Only return process instances with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return process instances with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns process instances without a tenantId set. If
        /// false, the withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='sort'>
        /// Property to sort on, to be used together with the order. Possible
        /// values include: 'id', 'processDefinitionId', 'tenantId',
        /// 'processDefinitionKey'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetProcessInstancesWithHttpMessagesAsync(string id = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? suspended = default(bool?), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Start a process instance
        /// </summary>
        /// <remarks>
        /// ## Request body (start by process definition id)
        ///
        /// ```JSON
        /// {
        /// "processDefinitionId":"oneTaskProcess:1:158",
        /// "businessKey":"myBusinessKey",
        /// "variables": [
        /// {
        /// "name":"myVar",
        /// "value":"This is a variable",
        /// }
        /// ]
        /// }```
        ///
        /// ## Request body (start by process definition key)
        ///
        /// ```JSON
        /// {
        /// "processDefinitionKey":"oneTaskProcess",
        /// "businessKey":"myBusinessKey",
        /// "tenantId": "tenant1",
        /// "variables": [
        /// {
        /// "name":"myVar",
        /// "value":"This is a variable",
        /// }
        /// ]
        /// }```
        ///
        /// ## Request body (start by message)
        ///
        /// ```JSON
        /// {
        /// "message":"newOrderMessage",
        /// "businessKey":"myBusinessKey",
        /// "tenantId": "tenant1",
        /// "variables": [
        /// {
        /// "name":"myVar",
        /// "value":"This is a variable",
        /// }
        /// ]
        /// }```
        ///
        /// Note that also a *transientVariables* property is accepted as part
        /// of this json, that follows the same structure as the *variables*
        /// property.
        ///
        /// Only one of *processDefinitionId*, *processDefinitionKey* or
        /// *message* can be used in the request body. Parameters
        /// *businessKey*, *variables* and *tenantId* are optional. If tenantId
        /// is omitted, the default tenant will be used. More information about
        /// the variable format can be found in the REST variables section.
        /// Note that the variable-scope that is supplied is ignored,
        /// process-variables are always local.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessInstanceResponse>> CreateProcessInstanceWithHttpMessagesAsync(ProcessInstanceCreateRequest body = default(ProcessInstanceCreateRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessInstanceResponse>> GetProcessInstanceWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Activate or suspend a process instance
        /// </summary>
        /// <remarks>
        /// ## Activate a process instance
        ///
        /// ```JSON
        /// {
        /// "action" : "suspend"
        /// } ```
        ///
        ///
        /// ## Suspend a process instance
        ///
        /// ```JSON
        /// {
        /// "action" : "activate"
        /// } ```
        ///
        ///
        ///
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to activate/suspend.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProcessInstanceResponse>> PerformProcessInstanceActionWithHttpMessagesAsync(string processInstanceId, ProcessInstanceActionRequest body = default(ProcessInstanceActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to delete.
        /// </param>
        /// <param name='deleteReason'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProcessInstanceWithHttpMessagesAsync(string processInstanceId, string deleteReason = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get diagram for a process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to get the diagram for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetProcessInstanceDiagramWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get involved people for process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as itï¿½s
        /// only possible to involve users with a process-instance.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to the links for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestIdentityLink>>> ListProcessInstanceIdentityLinksWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add an involved user to a process instance
        /// </summary>
        /// <remarks>
        /// Note that the groupId in Response Body will always be null, as itï¿½s
        /// only possible to involve users with a process-instance.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to the links for.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> CreateProcessInstanceIdentityLinksWithHttpMessagesAsync(string processInstanceId, RestIdentityLink body = default(RestIdentityLink), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specific involved people from process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to get.
        /// </param>
        /// <param name='identityId'>
        /// </param>
        /// <param name='type'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> GetProcessInstanceIdentityLinksWithHttpMessagesAsync(string processInstanceId, string identityId, string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove an involved user to from process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance.
        /// </param>
        /// <param name='identityId'>
        /// The id of the user to delete link for.
        /// </param>
        /// <param name='type'>
        /// Type of link to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProcessInstanceIdentityLinksWithHttpMessagesAsync(string processInstanceId, string identityId, string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of variables for a process instance
        /// </summary>
        /// <remarks>
        /// In case the variable is a binary variable or serializable, the
        /// valueUrl points to an URL to fetch the raw value. If itï¿½s a plain
        /// variable, the value is present in the response. Note that only
        /// local scoped variables are returned, as there is no global scope
        /// for process-instance variables.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to the variables for.
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestVariable>>> GetVariablesWithHttpMessagesAsync(string processInstanceId, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create variables or new binary variable on a process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables
        ///
        /// ```JSON
        /// [
        /// {
        /// "name":"intProcVar"
        /// "type":"integer"
        /// "value":123
        /// },
        ///
        /// ...
        /// ] ```
        ///
        ///
        /// Any number of variables can be passed into the request body array.
        /// More information about the variable format can be found in the REST
        /// variables section. Note that scope is ignored, only local variables
        /// can be set in a process instance.
        ///
        ///
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the variable.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// name: Required name of the variable.
        ///
        /// type: Type of variable that is created. If omitted, binary is
        /// assumed and the binary data in the request will be stored as an
        /// array of bytes.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to create the new variable for
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateProcessInstanceVariableWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a single or binary variable or multiple variables on a
        /// process instance
        /// </summary>
        /// <remarks>
        /// ## Update multiples variables
        ///
        /// ```JSON
        /// [
        /// {
        /// "name":"intProcVar"
        /// "type":"integer"
        /// "value":123
        /// },
        ///
        /// ...
        /// ] ```
        ///
        ///
        /// Any number of variables can be passed into the request body array.
        /// More information about the variable format can be found in the REST
        /// variables section. Note that scope is ignored, only local variables
        /// can be set in a process instance.
        ///
        ///
        /// ## Update a single variable
        ///
        /// ```JSON
        /// {
        /// "name":"intProcVar"
        /// "type":"integer"
        /// "value":123
        /// } ```
        ///
        ///
        /// ##  Update an existing binary variable
        ///
        ///
        ///
        ///
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the variable.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// name: Required name of the variable.
        ///
        /// type: Type of variable that is created. If omitted, binary is
        /// assumed and the binary data in the request will be stored as an
        /// array of bytes.
        /// </remarks>
        /// <param name='processInstanceId'>
        /// The id of the process instance to create the new variable for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateOrUpdateProcessVariableWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete all variables
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteLocalProcessVariableWithHttpMessagesAsync(string processInstanceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a variable for a process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to the variables for.
        /// </param>
        /// <param name='variableName'>
        /// Name of the variable to get.
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> GetProcessInstanceVariableWithHttpMessagesAsync(string processInstanceId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a single variable on a process instance
        /// </summary>
        /// <param name='processInstanceId'>
        /// The id of the process instance to the variables for.
        /// </param>
        /// <param name='variableName'>
        /// Name of the variable to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> UpdateProcessInstanceVariableWithHttpMessagesAsync(string processInstanceId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a variable
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProcessInstanceVariableWithHttpMessagesAsync(string processInstanceId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <param name='processInstanceId'>
        /// </param>
        /// <param name='variableName'>
        /// </param>
        /// <param name='scope'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetProcessInstanceVariableDataWithHttpMessagesAsync(string processInstanceId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Signal event received
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SignalEventReceivedWithHttpMessagesAsync(SignalEventReceivedRequest body = default(SignalEventReceivedRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List of tasks
        /// </summary>
        /// <param name='name'>
        /// Only return models with the given version.
        /// </param>
        /// <param name='nameLike'>
        /// Only return tasks with a name like the given name.
        /// </param>
        /// <param name='description'>
        /// Only return tasks with the given description.
        /// </param>
        /// <param name='priority'>
        /// Only return tasks with the given priority.
        /// </param>
        /// <param name='minimumPriority'>
        /// Only return tasks with a priority greater than the given value.
        /// </param>
        /// <param name='maximumPriority'>
        /// Only return tasks with a priority lower than the given value.
        /// </param>
        /// <param name='assignee'>
        /// Only return tasks assigned to the given user.
        /// </param>
        /// <param name='assigneeLike'>
        /// Only return tasks assigned with an assignee like the given value.
        /// </param>
        /// <param name='owner'>
        /// Only return tasks owned by the given user.
        /// </param>
        /// <param name='ownerLike'>
        /// Only return tasks assigned with an owner like the given value.
        /// </param>
        /// <param name='unassigned'>
        /// Only return tasks that are not assigned to anyone. If false is
        /// passed, the value is ignored.
        /// </param>
        /// <param name='delegationState'>
        /// Only return tasks that have the given delegation state. Possible
        /// values are pending and resolved.
        /// </param>
        /// <param name='candidateUser'>
        /// Only return tasks that can be claimed by the given user. This
        /// includes both tasks where the user is an explicit candidate for and
        /// task that are claimable by a group that the user is a member of.
        /// </param>
        /// <param name='candidateGroup'>
        /// Only return tasks that can be claimed by a user in the given group.
        /// </param>
        /// <param name='candidateGroups'>
        /// Only return tasks that can be claimed by a user in the given
        /// groups. Values split by comma.
        /// </param>
        /// <param name='involvedUser'>
        /// Only return tasks in which the given user is involved.
        /// </param>
        /// <param name='taskDefinitionKey'>
        /// Only return tasks with the given task definition id.
        /// </param>
        /// <param name='taskDefinitionKeyLike'>
        /// Only return tasks with a given task definition id like the given
        /// value.
        /// </param>
        /// <param name='processInstanceId'>
        /// Only return tasks which are part of the process instance with the
        /// given id.
        /// </param>
        /// <param name='processInstanceBusinessKey'>
        /// Only return tasks which are part of the process instance with the
        /// given business key.
        /// </param>
        /// <param name='processInstanceBusinessKeyLike'>
        /// Only return tasks which are part of the process instance which has
        /// a business key like the given value.
        /// </param>
        /// <param name='processDefinitionId'>
        /// Only return tasks which are part of a process instance which has a
        /// process definition with the given id.
        /// </param>
        /// <param name='processDefinitionKey'>
        /// Only return tasks which are part of a process instance which has a
        /// process definition with the given key.
        /// </param>
        /// <param name='processDefinitionKeyLike'>
        /// Only return tasks which are part of a process instance which has a
        /// process definition with a key like the given value.
        /// </param>
        /// <param name='processDefinitionName'>
        /// Only return tasks which are part of a process instance which has a
        /// process definition with the given name.
        /// </param>
        /// <param name='processDefinitionNameLike'>
        /// Only return tasks which are part of a process instance which has a
        /// process definition with a name like the given value.
        /// </param>
        /// <param name='executionId'>
        /// Only return tasks which are part of the execution with the given
        /// id.
        /// </param>
        /// <param name='createdOn'>
        /// Only return tasks which are created on the given date.
        /// </param>
        /// <param name='createdBefore'>
        /// Only return tasks which are created before the given date.
        /// </param>
        /// <param name='createdAfter'>
        /// Only return tasks which are created after the given date.
        /// </param>
        /// <param name='dueOn'>
        /// Only return tasks which are due on the given date.
        /// </param>
        /// <param name='dueBefore'>
        /// Only return tasks which are due before the given date.
        /// </param>
        /// <param name='dueAfter'>
        /// Only return tasks which are due after the given date.
        /// </param>
        /// <param name='withoutDueDate'>
        /// Only return tasks which donï¿½t have a due date. The property is
        /// ignored if the value is false.
        /// </param>
        /// <param name='excludeSubTasks'>
        /// Only return tasks that are not a subtask of another task.
        /// </param>
        /// <param name='active'>
        /// If true, only return tasks that are not suspended (either part of a
        /// process that is not suspended or not part of a process at all). If
        /// false, only tasks that are part of suspended process instances are
        /// returned.
        /// </param>
        /// <param name='includeTaskLocalVariables'>
        /// Indication to include task local variables in the result.
        /// </param>
        /// <param name='includeProcessVariables'>
        /// Indication to include process variables in the result.
        /// </param>
        /// <param name='tenantId'>
        /// Only return tasks with the given tenantId.
        /// </param>
        /// <param name='tenantIdLike'>
        /// Only return tasks with a tenantId like the given value.
        /// </param>
        /// <param name='withoutTenantId'>
        /// If true, only returns tasks without a tenantId set. If false, the
        /// withoutTenantId parameter is ignored.
        /// </param>
        /// <param name='candidateOrAssigned'>
        /// Select tasks that has been claimed or assigned to user or waiting
        /// to claim by user (candidate user or groups).
        /// </param>
        /// <param name='category'>
        /// Select tasks with the given category. Note that this is the task
        /// category, not the category of the process definition (namespace
        /// within the BPMN Xml).
        ///
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DataResponse>> GetTasksWithHttpMessagesAsync(string name = default(string), string nameLike = default(string), string description = default(string), string priority = default(string), string minimumPriority = default(string), string maximumPriority = default(string), string assignee = default(string), string assigneeLike = default(string), string owner = default(string), string ownerLike = default(string), string unassigned = default(string), string delegationState = default(string), string candidateUser = default(string), string candidateGroup = default(string), string candidateGroups = default(string), string involvedUser = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyLike = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string createdOn = default(string), string createdBefore = default(string), string createdAfter = default(string), string dueOn = default(string), string dueBefore = default(string), string dueAfter = default(string), bool? withoutDueDate = default(bool?), bool? excludeSubTasks = default(bool?), bool? active = default(bool?), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string candidateOrAssigned = default(string), string category = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create Task
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TaskResponse>> CreateTaskWithHttpMessagesAsync(TaskRequest body = default(TaskRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TaskResponse>> GetTaskWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tasks actions
        /// </summary>
        /// <remarks>
        /// ## Complete a task - Request Body
        ///
        /// ```JSON
        /// {
        /// "action" : "complete",
        /// "variables" : []
        /// } ```Completes the task. Optional variable array can be passed in
        /// using the variables property. More information about the variable
        /// format can be found in the REST variables section. Note that the
        /// variable-scope that is supplied is ignored and the variables are
        /// set on the parent-scope unless a variable exists in a local scope,
        /// which is overridden in this case. This is the same behavior as the
        /// TaskService.completeTask(taskId, variables) invocation.
        ///
        /// Note that also a transientVariables property is accepted as part of
        /// this json, that follows the same structure as the variables
        /// property.
        ///
        ///
        /// ## Claim a task - Request Body
        ///
        /// ```JSON
        /// {
        /// "action" : "claim",
        /// "assignee" : "userWhoClaims"
        /// } ```
        ///
        ///
        /// Claims the task by the given assignee. If the assignee is null, the
        /// task is assigned to no-one, claimable again.
        ///
        ///
        /// ## Delegate a task - Request Body
        ///
        /// ```JSON
        /// {
        /// "action" : "delegate",
        /// "assignee" : "userToDelegateTo"
        /// } ```
        ///
        ///
        /// Delegates the task to the given assignee. The assignee is required.
        ///
        ///
        /// ## Suspend a process instance
        ///
        /// ```JSON
        /// {
        /// "action" : "resolve"
        /// } ```
        ///
        ///
        /// Resolves the task delegation. The task is assigned back to the task
        /// owner (if any).
        /// </remarks>
        /// <param name='taskId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ExecuteTaskActionWithHttpMessagesAsync(string taskId, TaskActionRequest body = default(TaskActionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a task
        /// </summary>
        /// <remarks>
        /// All request values are optional. For example, you can only include
        /// the assignee attribute in the request body JSON-object, only
        /// updating the assignee of the task, leaving all other fields
        /// unaffected. When an attribute is explicitly included and is set to
        /// null, the task-value will be updated to null. Example: {"dueDate" :
        /// null} will clear the duedate of the task).
        /// </remarks>
        /// <param name='taskId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TaskResponse>> UpdateTaskWithHttpMessagesAsync(string taskId, TaskRequest body = default(TaskRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTaskWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all attachments on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the attachments for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<AttachmentResponse>>> GetAttachmentsWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new attachment on a task, containing a link to an external
        /// resource or an attached file
        /// </summary>
        /// <remarks>
        /// ## Create a new attachment on a task, containing a link to an
        /// external resource
        ///
        /// ```JSON
        /// {
        /// "name":"Simple attachment",
        /// "description":"Simple attachment description",
        /// "type":"simpleType",
        /// "externalUrl":"http://activiti.org"
        /// } ```
        ///
        ///
        /// Only the attachment name is required to create a new attachment.
        ///
        ///
        ///
        /// ## Create a new attachment on a task, with an attached file
        ///
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the variable.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// - *name*: Required name of the variable.
        ///
        /// - *description*: Description of the attachment, optional.
        ///
        /// - *type*: Type of attachment, optional. Supports any arbitrary
        /// string or a valid HTTP content-type.
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task to create the attachment for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachmentResponse>> CreateAttachmentWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an attachment on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the attachment for.
        /// </param>
        /// <param name='attachmentId'>
        /// The id of the attachment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<AttachmentResponse>> GetAttachmentWithHttpMessagesAsync(string taskId, string attachmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an attachment on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to delete the attachment for.
        /// </param>
        /// <param name='attachmentId'>
        /// The id of the attachment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteAttachmentWithHttpMessagesAsync(string taskId, string attachmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the content for an attachment
        /// </summary>
        /// <remarks>
        /// The response body contains the binary content. By default, the
        /// content-type of the response is set to application/octet-stream
        /// unless the attachment type contains a valid Content-type.
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task to get a variable data for.
        /// </param>
        /// <param name='attachmentId'>
        /// The id of the attachment, a 404 is returned when the attachment
        /// points to an external URL rather than content attached in Activiti.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GetAttachmentContentWithHttpMessagesAsync(string taskId, string attachmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all comments on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the comments for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CommentResponse>>> ListTaskCommentsWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new comment on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to create the comment for.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CommentResponse>> CreateTaskCommentsWithHttpMessagesAsync(string taskId, CommentRequest body = default(CommentRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a comment on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the comment for.
        /// </param>
        /// <param name='commentId'>
        /// The id of the comment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CommentResponse>> GetTaskCommentWithHttpMessagesAsync(string taskId, string commentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a comment on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to delete the comment for.
        /// </param>
        /// <param name='commentId'>
        /// The id of the comment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTaskCommentWithHttpMessagesAsync(string taskId, string commentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all events for a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the events for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<EventResponse>>> GetEventsWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an event on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the event for.
        /// </param>
        /// <param name='eventId'>
        /// The id of the event.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EventResponse>> GetEventWithHttpMessagesAsync(string taskId, string eventId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an event on a task
        /// </summary>
        /// <param name='taskId'>
        /// </param>
        /// <param name='eventId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteEventWithHttpMessagesAsync(string taskId, string eventId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all identity links for a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get the identity links for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestIdentityLink>>> ListTasksInstanceIdentityLinksWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an identity link on a task
        /// </summary>
        /// <remarks>
        /// ## Request body (user)
        ///
        /// ```JSON
        /// {
        /// "userId" : "kermit",
        /// "type" : "candidate",
        /// } ```
        ///
        ///
        /// ## Request body (group)
        ///
        /// ```JSON
        /// {
        /// "groupId" : "sales",
        /// "type" : "candidate",
        /// } ```
        ///
        ///
        ///
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task .
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> CreateTaskInstanceIdentityLinksWithHttpMessagesAsync(string taskId, RestIdentityLink body = default(RestIdentityLink), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all identitylinks for a task for either groups or users
        /// </summary>
        /// <remarks>
        /// ## Get all identitylinks for a task URL
        ///
        /// ```
        /// GET runtime/tasks/{taskId}/identitylinks/users
        /// GET runtime/tasks/{taskId}/identitylinks/groups  ```
        ///
        ///
        /// Returns only identity links targetting either users or groups.
        /// Response body and status-codes are exactly the same as when getting
        /// the full list of identity links for a task.
        /// </remarks>
        /// <param name='taskId'>
        /// </param>
        /// <param name='family'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestIdentityLink>>> GetIdentityLinksForFamilyWithHttpMessagesAsync(string taskId, string family, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a single identity link on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task .
        /// </param>
        /// <param name='family'>
        /// Either groups or users, depending on what kind of identity is
        /// targeted.
        /// </param>
        /// <param name='identityId'>
        /// The id of the identity.
        /// </param>
        /// <param name='type'>
        /// The type of identity link.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestIdentityLink>> GetTaskInstanceIdentityLinksWithHttpMessagesAsync(string taskId, string family, string identityId, string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an identity link on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task.
        /// </param>
        /// <param name='family'>
        /// Either groups or users, depending on what kind of identity is
        /// targeted.
        /// </param>
        /// <param name='identityId'>
        /// The id of the identity.
        /// </param>
        /// <param name='type'>
        /// The type of identity link.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTaskInstanceIdentityLinksWithHttpMessagesAsync(string taskId, string family, string identityId, string type, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of sub tasks for a task
        /// </summary>
        /// <param name='taskId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<TaskResponse>>> GetSubTasksWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all variables for a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get variables for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<RestVariable>>> ListTaskVariablesWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new variables on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for creating simple (non-binary) variables
        ///
        /// ```JSON
        /// [
        /// {
        /// "name" : "myTaskVariable",
        /// "scope" : "local",
        /// "type" : "string",
        /// "value" : "Hello my friend"
        /// },
        /// {
        ///
        /// }
        /// ] ```
        ///
        ///
        /// The request body should be an array containing one or more
        /// JSON-objects representing the variables that should be created.
        ///
        /// - *name*: Required name of the variable
        ///
        /// scope: Scope of variable that is created. If omitted, local is
        /// assumed.
        ///
        /// - *type*: Type of variable that is created. If omitted, reverts to
        /// raw JSON-value type (string, boolean, integer or double).
        ///
        /// - *value*: Variable value.
        ///
        /// More information about the variable format can be found in the REST
        /// variables section.
        ///
        ///
        /// ## Request body for Creating a new binary variable
        ///
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the variable.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// - *name*: Required name of the variable.
        ///
        /// scope: Scope of variable that is created. If omitted, local is
        /// assumed.
        ///
        /// - *type*: Type of variable that is created. If omitted, binary is
        /// assumed and the binary data in the request will be stored as an
        /// array of bytes.
        ///
        ///
        ///
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task to create the new variable for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateTaskVariableWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete all local variables on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task the variable to delete belongs to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteAllLocalTaskVariablesWithHttpMessagesAsync(string taskId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a variable from a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task to get a variable for.
        /// </param>
        /// <param name='variableName'>
        /// The name of the variable to get.
        /// </param>
        /// <param name='scope'>
        /// Scope of variable to be returned. When local, only task-local
        /// variable value is returned. When global, only variable value from
        /// the taskï¿½s parent execution-hierarchy are returned. When the
        /// parameter is omitted, a local variable will be returned if it
        /// exists, otherwise a global variable.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> GetTaskInstanceVariableWithHttpMessagesAsync(string taskId, string variableName, string scope = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an existing variable on a task
        /// </summary>
        /// <remarks>
        /// ## Request body for updating simple (non-binary) variables
        ///
        /// ```JSON
        /// {
        /// "name" : "myTaskVariable",
        /// "scope" : "local",
        /// "type" : "string",
        /// "value" : "Hello my friend"
        /// } ```
        ///
        ///
        /// - *name*: Required name of the variable
        ///
        /// - *scope*: Scope of variable that is updated. If omitted, local is
        /// assumed.
        ///
        /// - *type*: Type of variable that is updated. If omitted, reverts to
        /// raw JSON-value type (string, boolean, integer or double).
        ///
        /// - *value*: Variable value.
        ///
        ///
        /// ## Request body for updating simple (non-binary) variables
        ///
        /// The request should be of type multipart/form-data. There should be
        /// a single file-part included with the binary value of the variable.
        /// On top of that, the following additional form-fields can be
        /// present:
        ///
        /// - *name*: Required name of the variable.
        ///
        /// - *scope*: Scope of variable that is updated. If omitted, local is
        /// assumed.
        ///
        /// - *type*: Type of variable that is updated. If omitted, binary is
        /// assumed and the binary data in the request will be stored as an
        /// array of bytes.
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task to update the variable for.
        /// </param>
        /// <param name='variableName'>
        /// The name of the variable to update.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RestVariable>> UpdateTaskInstanceVariableWithHttpMessagesAsync(string taskId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a variable on a task
        /// </summary>
        /// <param name='taskId'>
        /// The id of the task the variable to delete belongs to.
        /// </param>
        /// <param name='variableName'>
        /// The name of the variable to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteTaskInstanceVariableWithHttpMessagesAsync(string taskId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the binary data for a variable
        /// </summary>
        /// <remarks>
        /// The response body contains the binary value of the variable. When
        /// the variable is of type binary, the content-type of the response is
        /// set to application/octet-stream, regardless of the content of the
        /// variable or the request accept-type header. In case of
        /// serializable, application/x-java-serialized-object is used as
        /// content-type.
        /// </remarks>
        /// <param name='taskId'>
        /// The id of the task to get a variable data for.
        /// </param>
        /// <param name='variableName'>
        /// The name of the variable to get data for. Only variables of type
        /// binary and serializable can be used. If any other type of variable
        /// is used, a 404 is returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<byte[]>>> GeTaskVariableDataWithHttpMessagesAsync(string taskId, string variableName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
