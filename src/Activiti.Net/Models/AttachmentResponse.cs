// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Activiti.Net.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AttachmentResponse
    {
        /// <summary>
        /// Initializes a new instance of the AttachmentResponse class.
        /// </summary>
        public AttachmentResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttachmentResponse class.
        /// </summary>
        /// <param name="type">Can be any arbitrary value. When a valid
        /// formatted media-type (e.g. application/xml, text/plain) is
        /// included, the binary content HTTP response content-type will be set
        /// the the given value.</param>
        /// <param name="externalUrl">contentUrl:In case the attachment is a
        /// link to an external resource, the externalUrl contains the URL to
        /// the external content. If the attachment content is present in the
        /// Activiti engine, the contentUrl will contain an URL where the
        /// binary content can be streamed from.</param>
        public AttachmentResponse(string id = default(string), string url = default(string), string name = default(string), string userId = default(string), string description = default(string), string type = default(string), string taskUrl = default(string), string processInstanceUrl = default(string), string externalUrl = default(string), string contentUrl = default(string), System.DateTime? time = default(System.DateTime?))
        {
            Id = id;
            Url = url;
            Name = name;
            UserId = userId;
            Description = description;
            Type = type;
            TaskUrl = taskUrl;
            ProcessInstanceUrl = processInstanceUrl;
            ExternalUrl = externalUrl;
            ContentUrl = contentUrl;
            Time = time;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets can be any arbitrary value. When a valid formatted
        /// media-type (e.g. application/xml, text/plain) is included, the
        /// binary content HTTP response content-type will be set the the given
        /// value.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taskUrl")]
        public string TaskUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processInstanceUrl")]
        public string ProcessInstanceUrl { get; set; }

        /// <summary>
        /// Gets or sets contentUrl:In case the attachment is a link to an
        /// external resource, the externalUrl contains the URL to the external
        /// content. If the attachment content is present in the Activiti
        /// engine, the contentUrl will contain an URL where the binary content
        /// can be streamed from.
        /// </summary>
        [JsonProperty(PropertyName = "externalUrl")]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "contentUrl")]
        public string ContentUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public System.DateTime? Time { get; set; }

    }
}
