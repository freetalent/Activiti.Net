// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Activiti.Net.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TaskResponse
    {
        /// <summary>
        /// Initializes a new instance of the TaskResponse class.
        /// </summary>
        public TaskResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskResponse class.
        /// </summary>
        /// <param name="delegationState">Delegation-state of the task, can be
        /// null, "pending" or "resolved".</param>
        public TaskResponse(string id = default(string), string url = default(string), string owner = default(string), string assignee = default(string), string delegationState = default(string), string name = default(string), string description = default(string), System.DateTime? createTime = default(System.DateTime?), System.DateTime? dueDate = default(System.DateTime?), int? priority = default(int?), bool? suspended = default(bool?), string taskDefinitionKey = default(string), string tenantId = default(string), string category = default(string), string formKey = default(string), string parentTaskId = default(string), string parentTaskUrl = default(string), string executionId = default(string), string executionUrl = default(string), string processInstanceId = default(string), string processInstanceUrl = default(string), string processDefinitionId = default(string), string processDefinitionUrl = default(string), IList<RestVariable> variables = default(IList<RestVariable>))
        {
            Id = id;
            Url = url;
            Owner = owner;
            Assignee = assignee;
            DelegationState = delegationState;
            Name = name;
            Description = description;
            CreateTime = createTime;
            DueDate = dueDate;
            Priority = priority;
            Suspended = suspended;
            TaskDefinitionKey = taskDefinitionKey;
            TenantId = tenantId;
            Category = category;
            FormKey = formKey;
            ParentTaskId = parentTaskId;
            ParentTaskUrl = parentTaskUrl;
            ExecutionId = executionId;
            ExecutionUrl = executionUrl;
            ProcessInstanceId = processInstanceId;
            ProcessInstanceUrl = processInstanceUrl;
            ProcessDefinitionId = processDefinitionId;
            ProcessDefinitionUrl = processDefinitionUrl;
            Variables = variables;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assignee")]
        public string Assignee { get; set; }

        /// <summary>
        /// Gets or sets delegation-state of the task, can be null, "pending"
        /// or "resolved".
        /// </summary>
        [JsonProperty(PropertyName = "delegationState")]
        public string DelegationState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createTime")]
        public System.DateTime? CreateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dueDate")]
        public System.DateTime? DueDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "suspended")]
        public bool? Suspended { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "taskDefinitionKey")]
        public string TaskDefinitionKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "formKey")]
        public string FormKey { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentTaskId")]
        public string ParentTaskId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "parentTaskUrl")]
        public string ParentTaskUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "executionId")]
        public string ExecutionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "executionUrl")]
        public string ExecutionUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processInstanceId")]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processInstanceUrl")]
        public string ProcessInstanceUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processDefinitionId")]
        public string ProcessDefinitionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "processDefinitionUrl")]
        public string ProcessDefinitionUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "variables")]
        public IList<RestVariable> Variables { get; set; }

    }
}
