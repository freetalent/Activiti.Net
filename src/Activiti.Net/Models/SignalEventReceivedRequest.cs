// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Activiti.Net.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SignalEventReceivedRequest
    {
        /// <summary>
        /// Initializes a new instance of the SignalEventReceivedRequest class.
        /// </summary>
        public SignalEventReceivedRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SignalEventReceivedRequest class.
        /// </summary>
        /// <param name="signalName">Name of the signal</param>
        /// <param name="variables">Array of variables (in the general
        /// variables format) to use as payload to pass along with the signal.
        /// Cannot be used in case async is set to true, this will result in an
        /// error.</param>
        /// <param name="tenantId">ID of the tenant that the signal event
        /// should be processed in</param>
        /// <param name="asyncProperty">If true, handling of the signal will
        /// happen asynchronously. Return code will be 202 - Accepted to
        /// indicate the request is accepted but not yet executed. If false,
        /// handling the signal will be done immediately and result (200 - OK)
        /// will only return after this completed successfully. Defaults to
        /// false if omitted.</param>
        public SignalEventReceivedRequest(string signalName = default(string), IList<RestVariable> variables = default(IList<RestVariable>), string tenantId = default(string), bool? asyncProperty = default(bool?))
        {
            SignalName = signalName;
            Variables = variables;
            TenantId = tenantId;
            AsyncProperty = asyncProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the signal
        /// </summary>
        [JsonProperty(PropertyName = "signalName")]
        public string SignalName { get; set; }

        /// <summary>
        /// Gets or sets array of variables (in the general variables format)
        /// to use as payload to pass along with the signal. Cannot be used in
        /// case async is set to true, this will result in an error.
        /// </summary>
        [JsonProperty(PropertyName = "variables")]
        public IList<RestVariable> Variables { get; set; }

        /// <summary>
        /// Gets or sets ID of the tenant that the signal event should be
        /// processed in
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets if true, handling of the signal will happen
        /// asynchronously. Return code will be 202 - Accepted to indicate the
        /// request is accepted but not yet executed. If false,
        /// handling the signal will be done immediately and result (200 - OK)
        /// will only return after this completed successfully. Defaults to
        /// false if omitted.
        /// </summary>
        [JsonProperty(PropertyName = "async")]
        public bool? AsyncProperty { get; set; }

    }
}
