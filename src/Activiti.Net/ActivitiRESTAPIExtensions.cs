// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Activiti.Net
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ActivitiRESTAPI.
    /// </summary>
    public static partial class ActivitiRESTAPIExtensions
    {
            /// <summary>
            /// Get form data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The task id corresponding to the form data that needs to be retrieved.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id corresponding to the start event form data that
            /// needs to be retrieved.
            /// </param>
            public static FormDataResponse GetFormData(this IActivitiRESTAPI operations, string taskId = default(string), string processDefinitionId = default(string))
            {
                return operations.GetFormDataAsync(taskId, processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get form data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The task id corresponding to the form data that needs to be retrieved.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id corresponding to the start event form data that
            /// needs to be retrieved.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FormDataResponse> GetFormDataAsync(this IActivitiRESTAPI operations, string taskId = default(string), string processDefinitionId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFormDataWithHttpMessagesAsync(taskId, processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit task form data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProcessInstanceResponse SubmitForm(this IActivitiRESTAPI operations, SubmitFormRequest body = default(SubmitFormRequest))
            {
                return operations.SubmitFormAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit task form data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInstanceResponse> SubmitFormAsync(this IActivitiRESTAPI operations, SubmitFormRequest body = default(SubmitFormRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubmitFormWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get historic activity instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityId'>
            /// An id of the activity instance.
            /// </param>
            /// <param name='activityInstanceId'>
            /// An id of the historic activity instance.
            /// </param>
            /// <param name='activityName'>
            /// The name of the historic activity instance.
            /// </param>
            /// <param name='activityType'>
            /// The element type of the historic activity instance.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic activity instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic activity instance is finished.
            /// </param>
            /// <param name='taskAssignee'>
            /// The assignee of the historic activity instance.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic activity instance.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic activity instance.
            /// </param>
            /// <param name='tenantId'>
            /// Only return instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns instances without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            public static DataResponse GetHistoricActivityInstances(this IActivitiRESTAPI operations, string activityId = default(string), string activityInstanceId = default(string), string activityName = default(string), string activityType = default(string), string executionId = default(string), bool? finished = default(bool?), string taskAssignee = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?))
            {
                return operations.GetHistoricActivityInstancesAsync(activityId, activityInstanceId, activityName, activityType, executionId, finished, taskAssignee, processInstanceId, processDefinitionId, tenantId, tenantIdLike, withoutTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get historic activity instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='activityId'>
            /// An id of the activity instance.
            /// </param>
            /// <param name='activityInstanceId'>
            /// An id of the historic activity instance.
            /// </param>
            /// <param name='activityName'>
            /// The name of the historic activity instance.
            /// </param>
            /// <param name='activityType'>
            /// The element type of the historic activity instance.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic activity instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic activity instance is finished.
            /// </param>
            /// <param name='taskAssignee'>
            /// The assignee of the historic activity instance.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic activity instance.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic activity instance.
            /// </param>
            /// <param name='tenantId'>
            /// Only return instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns instances without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetHistoricActivityInstancesAsync(this IActivitiRESTAPI operations, string activityId = default(string), string activityInstanceId = default(string), string activityName = default(string), string activityType = default(string), string executionId = default(string), bool? finished = default(bool?), string taskAssignee = default(string), string processInstanceId = default(string), string processDefinitionId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricActivityInstancesWithHttpMessagesAsync(activityId, activityInstanceId, activityName, activityType, executionId, finished, taskAssignee, processInstanceId, processDefinitionId, tenantId, tenantIdLike, withoutTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get historic detail
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the historic detail.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic detail.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic detail.
            /// </param>
            /// <param name='activityInstanceId'>
            /// The activity instance id of the historic detail.
            /// </param>
            /// <param name='taskId'>
            /// The task id of the historic detail.
            /// </param>
            /// <param name='selectOnlyFormProperties'>
            /// Indication to only return form properties in the result.
            /// </param>
            /// <param name='selectOnlyVariableUpdates'>
            /// Indication to only return variable updates in the result.
            /// </param>
            public static DataResponse GetHistoricDetailInfo(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string activityInstanceId = default(string), string taskId = default(string), bool? selectOnlyFormProperties = default(bool?), bool? selectOnlyVariableUpdates = default(bool?))
            {
                return operations.GetHistoricDetailInfoAsync(id, processInstanceId, executionId, activityInstanceId, taskId, selectOnlyFormProperties, selectOnlyVariableUpdates).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get historic detail
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the historic detail.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic detail.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic detail.
            /// </param>
            /// <param name='activityInstanceId'>
            /// The activity instance id of the historic detail.
            /// </param>
            /// <param name='taskId'>
            /// The task id of the historic detail.
            /// </param>
            /// <param name='selectOnlyFormProperties'>
            /// Indication to only return form properties in the result.
            /// </param>
            /// <param name='selectOnlyVariableUpdates'>
            /// Indication to only return variable updates in the result.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetHistoricDetailInfoAsync(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string activityInstanceId = default(string), string taskId = default(string), bool? selectOnlyFormProperties = default(bool?), bool? selectOnlyVariableUpdates = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricDetailInfoWithHttpMessagesAsync(id, processInstanceId, executionId, activityInstanceId, taskId, selectOnlyFormProperties, selectOnlyVariableUpdates, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the binary data for a historic detail variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailId'>
            /// </param>
            public static IList<byte[]> GetHistoricDetailVariableData(this IActivitiRESTAPI operations, string detailId)
            {
                return operations.GetHistoricDetailVariableDataAsync(detailId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a historic detail variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetHistoricDetailVariableDataAsync(this IActivitiRESTAPI operations, string detailId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricDetailVariableDataWithHttpMessagesAsync(detailId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of historic process instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// An id of the historic process instance.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// The process definition key of the historic process instance.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic process instance.
            /// </param>
            /// <param name='businessKey'>
            /// The business key of the historic process instance.
            /// </param>
            /// <param name='involvedUser'>
            /// An involved user of the historic process instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic process instance is finished.
            /// </param>
            /// <param name='superProcessInstanceId'>
            /// An optional parent process id of the historic process instance.
            /// </param>
            /// <param name='excludeSubprocesses'>
            /// Return only historic process instances which aren�t sub processes.
            /// </param>
            /// <param name='finishedAfter'>
            /// Return only historic process instances that were finished after this date.
            /// </param>
            /// <param name='finishedBefore'>
            /// Return only historic process instances that were finished before this date.
            /// </param>
            /// <param name='startedAfter'>
            /// Return only historic process instances that were started after this date.
            /// </param>
            /// <param name='startedBefore'>
            /// Return only historic process instances that were started before this date.
            /// </param>
            /// <param name='startedBy'>
            /// Return only historic process instances that were started by this user.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// An indication if the historic process instance variables should be returned
            /// as well.
            /// </param>
            /// <param name='tenantId'>
            /// Only return instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns instances without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            ///
            /// </param>
            public static DataResponse ListHistoricProcessInstances(this IActivitiRESTAPI operations, string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? finished = default(bool?), string superProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), string finishedAfter = default(string), string finishedBefore = default(string), string startedAfter = default(string), string startedBefore = default(string), string startedBy = default(string), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?))
            {
                return operations.ListHistoricProcessInstancesAsync(processInstanceId, processDefinitionKey, processDefinitionId, businessKey, involvedUser, finished, superProcessInstanceId, excludeSubprocesses, finishedAfter, finishedBefore, startedAfter, startedBefore, startedBy, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of historic process instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// An id of the historic process instance.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// The process definition key of the historic process instance.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic process instance.
            /// </param>
            /// <param name='businessKey'>
            /// The business key of the historic process instance.
            /// </param>
            /// <param name='involvedUser'>
            /// An involved user of the historic process instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic process instance is finished.
            /// </param>
            /// <param name='superProcessInstanceId'>
            /// An optional parent process id of the historic process instance.
            /// </param>
            /// <param name='excludeSubprocesses'>
            /// Return only historic process instances which aren�t sub processes.
            /// </param>
            /// <param name='finishedAfter'>
            /// Return only historic process instances that were finished after this date.
            /// </param>
            /// <param name='finishedBefore'>
            /// Return only historic process instances that were finished before this date.
            /// </param>
            /// <param name='startedAfter'>
            /// Return only historic process instances that were started after this date.
            /// </param>
            /// <param name='startedBefore'>
            /// Return only historic process instances that were started before this date.
            /// </param>
            /// <param name='startedBy'>
            /// Return only historic process instances that were started by this user.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// An indication if the historic process instance variables should be returned
            /// as well.
            /// </param>
            /// <param name='tenantId'>
            /// Only return instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns instances without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            ///
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListHistoricProcessInstancesAsync(this IActivitiRESTAPI operations, string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? finished = default(bool?), string superProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), string finishedAfter = default(string), string finishedBefore = default(string), string startedAfter = default(string), string startedBefore = default(string), string startedBy = default(string), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoricProcessInstancesWithHttpMessagesAsync(processInstanceId, processDefinitionKey, processDefinitionId, businessKey, involvedUser, finished, superProcessInstanceId, excludeSubprocesses, finishedAfter, finishedBefore, startedAfter, startedBefore, startedBy, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            public static HistoricProcessInstanceResponse GetHistoricProcessInstance(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.GetHistoricProcessInstanceAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HistoricProcessInstanceResponse> GetHistoricProcessInstanceAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricProcessInstanceWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            public static void DeleteHitoricProcessInstance(this IActivitiRESTAPI operations, string processInstanceId)
            {
                operations.DeleteHitoricProcessInstanceAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHitoricProcessInstanceAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHitoricProcessInstanceWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all comments on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get the comments for.
            /// </param>
            public static IList<CommentResponse> GetComments(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.GetCommentsAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all comments on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get the comments for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CommentResponse>> GetCommentsAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommentsWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new comment on a historic process instance
            /// </summary>
            /// <remarks>
            /// Parameter saveProcessInstanceId is optional, if true save process instance
            /// id of task with comment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommentResponse CreateComment(this IActivitiRESTAPI operations,string processInstanceId,CommentResponse body = default(CommentResponse))
            {
                return operations.CreateCommentAsync(processInstanceId,body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new comment on a historic process instance
            /// </summary>
            /// <remarks>
            /// Parameter saveProcessInstanceId is optional, if true save process instance
            /// id of task with comment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommentResponse> CreateCommentAsync(this IActivitiRESTAPI operations,string processInstanceId, CommentResponse body = default(CommentResponse), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCommentWithHttpMessagesAsync(processInstanceId,body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a comment on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the historic process instance to get the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            public static CommentResponse GetComment(this IActivitiRESTAPI operations, string processInstanceId, string commentId)
            {
                return operations.GetCommentAsync(processInstanceId, commentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a comment on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the historic process instance to get the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommentResponse> GetCommentAsync(this IActivitiRESTAPI operations, string processInstanceId, string commentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommentWithHttpMessagesAsync(processInstanceId, commentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a comment on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the historic process instance to delete the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            public static void DeleteComment(this IActivitiRESTAPI operations, string processInstanceId, string commentId)
            {
                operations.DeleteCommentAsync(processInstanceId, commentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a comment on a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the historic process instance to delete the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCommentAsync(this IActivitiRESTAPI operations, string processInstanceId, string commentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCommentWithHttpMessagesAsync(processInstanceId, commentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the identity links of a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            public static IList<HistoricIdentityLinkResponse> GetProcessIdentityLinks(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.GetProcessIdentityLinksAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the identity links of a historic process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HistoricIdentityLinkResponse>> GetProcessIdentityLinksAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessIdentityLinksWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the binary data for a historic process instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            public static IList<byte[]> GetHistoricProcessInstanceVariableData(this IActivitiRESTAPI operations, string processInstanceId, string variableName)
            {
                return operations.GetHistoricProcessInstanceVariableDataAsync(processInstanceId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a historic process instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetHistoricProcessInstanceVariableDataAsync(this IActivitiRESTAPI operations, string processInstanceId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricProcessInstanceVariableDataWithHttpMessagesAsync(processInstanceId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get historic task instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// An id of the historic task instance.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic task instance.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// The process definition key of the historic task instance.
            /// </param>
            /// <param name='processDefinitionKeyLike'>
            /// The process definition key of the historic task instance, which matches the
            /// given value.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic task instance.
            /// </param>
            /// <param name='processDefinitionName'>
            /// The process definition name of the historic task instance.
            /// </param>
            /// <param name='processDefinitionNameLike'>
            /// The process definition name of the historic task instance, which matches
            /// the given value.
            /// </param>
            /// <param name='processBusinessKey'>
            /// The process instance business key of the historic task instance.
            /// </param>
            /// <param name='processBusinessKeyLike'>
            /// The process instance business key of the historic task instance that
            /// matches the given value.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic task instance.
            /// </param>
            /// <param name='taskDefinitionKey'>
            /// The task definition key for tasks part of a process
            /// </param>
            /// <param name='taskName'>
            /// The task name of the historic task instance.
            /// </param>
            /// <param name='taskNameLike'>
            /// The task name with like operator for the historic task instance.
            /// </param>
            /// <param name='taskDescription'>
            /// The task description of the historic task instance.
            /// </param>
            /// <param name='taskDescriptionLike'>
            /// The task description with like operator for the historic task instance.
            /// </param>
            /// <param name='taskCategory'>
            /// Select tasks with the given category. Note that this is the task category,
            /// not the category of the process definition (namespace within the BPMN Xml).
            /// </param>
            /// <param name='taskDeleteReason'>
            /// The task delete reason of the historic task instance.
            /// </param>
            /// <param name='taskDeleteReasonLike'>
            /// The task delete reason with like operator for the historic task instance.
            /// </param>
            /// <param name='taskAssignee'>
            /// The assignee of the historic task instance.
            /// </param>
            /// <param name='taskAssigneeLike'>
            /// The assignee with like operator for the historic task instance.
            /// </param>
            /// <param name='taskOwner'>
            /// The owner of the historic task instance.
            /// </param>
            /// <param name='taskOwnerLike'>
            /// The owner with like operator for the historic task instance.
            /// </param>
            /// <param name='taskInvolvedUser'>
            /// An involved user of the historic task instance
            /// </param>
            /// <param name='taskPriority'>
            /// The priority of the historic task instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic task instance is finished.
            /// </param>
            /// <param name='processFinished'>
            /// Indication if the process instance of the historic task instance is
            /// finished.
            /// </param>
            /// <param name='parentTaskId'>
            /// An optional parent task id of the historic task instance.
            /// </param>
            /// <param name='dueDate'>
            /// Return only historic task instances that have a due date equal this date.
            /// </param>
            /// <param name='dueDateAfter'>
            /// Return only historic task instances that have a due date after this date.
            /// </param>
            /// <param name='dueDateBefore'>
            /// Return only historic task instances that have a due date before this date.
            /// </param>
            /// <param name='withoutDueDate'>
            /// Return only historic task instances that have no due-date. When false is
            /// provided as value, this parameter is ignored.
            /// </param>
            /// <param name='taskCompletedOn'>
            /// Return only historic task instances that have been completed on this date.
            /// </param>
            /// <param name='taskCompletedAfter'>
            /// Return only historic task instances that have been completed after this
            /// date.
            /// </param>
            /// <param name='taskCompletedBefore'>
            /// Return only historic task instances that have been completed before this
            /// date.
            /// </param>
            /// <param name='taskCreatedOn'>
            /// Return only historic task instances that were created on this date.
            /// </param>
            /// <param name='taskCreatedBefore'>
            /// Return only historic task instances that were created before this date.
            /// </param>
            /// <param name='taskCreatedAfter'>
            /// Return only historic task instances that were created after this date.
            /// </param>
            /// <param name='includeTaskLocalVariables'>
            /// An indication if the historic task instance local variables should be
            /// returned as well.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// An indication if the historic task instance global variables should be
            /// returned as well.
            /// </param>
            /// <param name='tenantId'>
            /// Only return historic task instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return historic task instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns historic task instances without a tenantId set. If
            /// false, the withoutTenantId parameter is ignored.
            /// </param>
            public static DataResponse ListHistoricTaskInstances(this IActivitiRESTAPI operations, string taskId = default(string), string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processBusinessKey = default(string), string processBusinessKeyLike = default(string), string executionId = default(string), string taskDefinitionKey = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskCategory = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), string taskInvolvedUser = default(string), string taskPriority = default(string), bool? finished = default(bool?), bool? processFinished = default(bool?), string parentTaskId = default(string), string dueDate = default(string), string dueDateAfter = default(string), string dueDateBefore = default(string), bool? withoutDueDate = default(bool?), string taskCompletedOn = default(string), string taskCompletedAfter = default(string), string taskCompletedBefore = default(string), string taskCreatedOn = default(string), string taskCreatedBefore = default(string), string taskCreatedAfter = default(string), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?))
            {
                return operations.ListHistoricTaskInstancesAsync(taskId, processInstanceId, processDefinitionKey, processDefinitionKeyLike, processDefinitionId, processDefinitionName, processDefinitionNameLike, processBusinessKey, processBusinessKeyLike, executionId, taskDefinitionKey, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskCategory, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskInvolvedUser, taskPriority, finished, processFinished, parentTaskId, dueDate, dueDateAfter, dueDateBefore, withoutDueDate, taskCompletedOn, taskCompletedAfter, taskCompletedBefore, taskCreatedOn, taskCreatedBefore, taskCreatedAfter, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get historic task instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// An id of the historic task instance.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic task instance.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// The process definition key of the historic task instance.
            /// </param>
            /// <param name='processDefinitionKeyLike'>
            /// The process definition key of the historic task instance, which matches the
            /// given value.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The process definition id of the historic task instance.
            /// </param>
            /// <param name='processDefinitionName'>
            /// The process definition name of the historic task instance.
            /// </param>
            /// <param name='processDefinitionNameLike'>
            /// The process definition name of the historic task instance, which matches
            /// the given value.
            /// </param>
            /// <param name='processBusinessKey'>
            /// The process instance business key of the historic task instance.
            /// </param>
            /// <param name='processBusinessKeyLike'>
            /// The process instance business key of the historic task instance that
            /// matches the given value.
            /// </param>
            /// <param name='executionId'>
            /// The execution id of the historic task instance.
            /// </param>
            /// <param name='taskDefinitionKey'>
            /// The task definition key for tasks part of a process
            /// </param>
            /// <param name='taskName'>
            /// The task name of the historic task instance.
            /// </param>
            /// <param name='taskNameLike'>
            /// The task name with like operator for the historic task instance.
            /// </param>
            /// <param name='taskDescription'>
            /// The task description of the historic task instance.
            /// </param>
            /// <param name='taskDescriptionLike'>
            /// The task description with like operator for the historic task instance.
            /// </param>
            /// <param name='taskCategory'>
            /// Select tasks with the given category. Note that this is the task category,
            /// not the category of the process definition (namespace within the BPMN Xml).
            /// </param>
            /// <param name='taskDeleteReason'>
            /// The task delete reason of the historic task instance.
            /// </param>
            /// <param name='taskDeleteReasonLike'>
            /// The task delete reason with like operator for the historic task instance.
            /// </param>
            /// <param name='taskAssignee'>
            /// The assignee of the historic task instance.
            /// </param>
            /// <param name='taskAssigneeLike'>
            /// The assignee with like operator for the historic task instance.
            /// </param>
            /// <param name='taskOwner'>
            /// The owner of the historic task instance.
            /// </param>
            /// <param name='taskOwnerLike'>
            /// The owner with like operator for the historic task instance.
            /// </param>
            /// <param name='taskInvolvedUser'>
            /// An involved user of the historic task instance
            /// </param>
            /// <param name='taskPriority'>
            /// The priority of the historic task instance.
            /// </param>
            /// <param name='finished'>
            /// Indication if the historic task instance is finished.
            /// </param>
            /// <param name='processFinished'>
            /// Indication if the process instance of the historic task instance is
            /// finished.
            /// </param>
            /// <param name='parentTaskId'>
            /// An optional parent task id of the historic task instance.
            /// </param>
            /// <param name='dueDate'>
            /// Return only historic task instances that have a due date equal this date.
            /// </param>
            /// <param name='dueDateAfter'>
            /// Return only historic task instances that have a due date after this date.
            /// </param>
            /// <param name='dueDateBefore'>
            /// Return only historic task instances that have a due date before this date.
            /// </param>
            /// <param name='withoutDueDate'>
            /// Return only historic task instances that have no due-date. When false is
            /// provided as value, this parameter is ignored.
            /// </param>
            /// <param name='taskCompletedOn'>
            /// Return only historic task instances that have been completed on this date.
            /// </param>
            /// <param name='taskCompletedAfter'>
            /// Return only historic task instances that have been completed after this
            /// date.
            /// </param>
            /// <param name='taskCompletedBefore'>
            /// Return only historic task instances that have been completed before this
            /// date.
            /// </param>
            /// <param name='taskCreatedOn'>
            /// Return only historic task instances that were created on this date.
            /// </param>
            /// <param name='taskCreatedBefore'>
            /// Return only historic task instances that were created before this date.
            /// </param>
            /// <param name='taskCreatedAfter'>
            /// Return only historic task instances that were created after this date.
            /// </param>
            /// <param name='includeTaskLocalVariables'>
            /// An indication if the historic task instance local variables should be
            /// returned as well.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// An indication if the historic task instance global variables should be
            /// returned as well.
            /// </param>
            /// <param name='tenantId'>
            /// Only return historic task instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return historic task instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns historic task instances without a tenantId set. If
            /// false, the withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListHistoricTaskInstancesAsync(this IActivitiRESTAPI operations, string taskId = default(string), string processInstanceId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string processBusinessKey = default(string), string processBusinessKeyLike = default(string), string executionId = default(string), string taskDefinitionKey = default(string), string taskName = default(string), string taskNameLike = default(string), string taskDescription = default(string), string taskDescriptionLike = default(string), string taskCategory = default(string), string taskDeleteReason = default(string), string taskDeleteReasonLike = default(string), string taskAssignee = default(string), string taskAssigneeLike = default(string), string taskOwner = default(string), string taskOwnerLike = default(string), string taskInvolvedUser = default(string), string taskPriority = default(string), bool? finished = default(bool?), bool? processFinished = default(bool?), string parentTaskId = default(string), string dueDate = default(string), string dueDateAfter = default(string), string dueDateBefore = default(string), bool? withoutDueDate = default(bool?), string taskCompletedOn = default(string), string taskCompletedAfter = default(string), string taskCompletedBefore = default(string), string taskCreatedOn = default(string), string taskCreatedBefore = default(string), string taskCreatedAfter = default(string), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHistoricTaskInstancesWithHttpMessagesAsync(taskId, processInstanceId, processDefinitionKey, processDefinitionKeyLike, processDefinitionId, processDefinitionName, processDefinitionNameLike, processBusinessKey, processBusinessKeyLike, executionId, taskDefinitionKey, taskName, taskNameLike, taskDescription, taskDescriptionLike, taskCategory, taskDeleteReason, taskDeleteReasonLike, taskAssignee, taskAssigneeLike, taskOwner, taskOwnerLike, taskInvolvedUser, taskPriority, finished, processFinished, parentTaskId, dueDate, dueDateAfter, dueDateBefore, withoutDueDate, taskCompletedOn, taskCompletedAfter, taskCompletedBefore, taskCreatedOn, taskCreatedBefore, taskCreatedAfter, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            public static HistoricTaskInstanceResponse GetTaskInstance(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetTaskInstanceAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HistoricTaskInstanceResponse> GetTaskInstanceAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskInstanceWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            public static void DeleteTaskInstance(this IActivitiRESTAPI operations, string taskId)
            {
                operations.DeleteTaskInstanceAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTaskInstanceAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTaskInstanceWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the identity links of a historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            public static IList<HistoricIdentityLinkResponse> GetTaskIdentityLinks(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetTaskIdentityLinksAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the identity links of a historic task instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HistoricIdentityLinkResponse>> GetTaskIdentityLinksAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskIdentityLinksWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the binary data for a historic task instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static IList<byte[]> GetHistoricTaskInstanceVariableData(this IActivitiRESTAPI operations, string taskId, string variableName, string scope = default(string))
            {
                return operations.GetHistoricTaskInstanceVariableDataAsync(taskId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a historic task instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetHistoricTaskInstanceVariableDataAsync(this IActivitiRESTAPI operations, string taskId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricTaskInstanceVariableDataWithHttpMessagesAsync(taskId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of historic variable instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic variable instance.
            /// </param>
            /// <param name='taskId'>
            /// The task id of the historic variable instance.
            /// </param>
            /// <param name='excludeTaskVariables'>
            /// Indication to exclude the task variables from the result.
            /// </param>
            /// <param name='variableName'>
            /// The variable name of the historic variable instance.
            /// </param>
            /// <param name='variableNameLike'>
            /// The variable name using the like operator for the historic variable
            /// instance.
            /// </param>
            public static DataResponse GetHistoricVariableInstances(this IActivitiRESTAPI operations, string processInstanceId = default(string), string taskId = default(string), bool? excludeTaskVariables = default(bool?), string variableName = default(string), string variableNameLike = default(string))
            {
                return operations.GetHistoricVariableInstancesAsync(processInstanceId, taskId, excludeTaskVariables, variableName, variableNameLike).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of historic variable instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The process instance id of the historic variable instance.
            /// </param>
            /// <param name='taskId'>
            /// The task id of the historic variable instance.
            /// </param>
            /// <param name='excludeTaskVariables'>
            /// Indication to exclude the task variables from the result.
            /// </param>
            /// <param name='variableName'>
            /// The variable name of the historic variable instance.
            /// </param>
            /// <param name='variableNameLike'>
            /// The variable name using the like operator for the historic variable
            /// instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetHistoricVariableInstancesAsync(this IActivitiRESTAPI operations, string processInstanceId = default(string), string taskId = default(string), bool? excludeTaskVariables = default(bool?), string variableName = default(string), string variableNameLike = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricVariableInstancesWithHttpMessagesAsync(processInstanceId, taskId, excludeTaskVariables, variableName, variableNameLike, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the binary data for a historic task instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='varInstanceId'>
            /// </param>
            public static IList<byte[]> GetHistoricInstanceVariableData(this IActivitiRESTAPI operations, string varInstanceId)
            {
                return operations.GetHistoricInstanceVariableDataAsync(varInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a historic task instance variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='varInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetHistoricInstanceVariableDataAsync(this IActivitiRESTAPI operations, string varInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHistoricInstanceVariableDataWithHttpMessagesAsync(varInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return group with the given id
            /// </param>
            /// <param name='name'>
            /// Only return groups with the given name
            /// </param>
            /// <param name='type'>
            /// Only return groups with the given type
            /// </param>
            /// <param name='nameLike'>
            /// Only return groups with a name like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='member'>
            /// Only return groups which have a member with the given username.
            /// </param>
            /// <param name='potentialStarter'>
            /// Only return groups which members are potential starters for a
            /// process-definition with the given id.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'name', 'type'
            /// </param>
            public static DataResponse GetGroups(this IActivitiRESTAPI operations, string id = default(string), string name = default(string), string type = default(string), string nameLike = default(string), string member = default(string), string potentialStarter = default(string), string sort = default(string))
            {
                return operations.GetGroupsAsync(id, name, type, nameLike, member, potentialStarter, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of groups
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return group with the given id
            /// </param>
            /// <param name='name'>
            /// Only return groups with the given name
            /// </param>
            /// <param name='type'>
            /// Only return groups with the given type
            /// </param>
            /// <param name='nameLike'>
            /// Only return groups with a name like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='member'>
            /// Only return groups which have a member with the given username.
            /// </param>
            /// <param name='potentialStarter'>
            /// Only return groups which members are potential starters for a
            /// process-definition with the given id.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'name', 'type'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetGroupsAsync(this IActivitiRESTAPI operations, string id = default(string), string name = default(string), string type = default(string), string nameLike = default(string), string member = default(string), string potentialStarter = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsWithHttpMessagesAsync(id, name, type, nameLike, member, potentialStarter, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GroupResponse CreateGroup(this IActivitiRESTAPI operations, GroupRequest body = default(GroupRequest))
            {
                return operations.CreateGroupAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupResponse> CreateGroupAsync(this IActivitiRESTAPI operations, GroupRequest body = default(GroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateGroupWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to get.
            /// </param>
            public static GroupResponse GetGroup(this IActivitiRESTAPI operations, string groupId)
            {
                return operations.GetGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupResponse> GetGroupAsync(this IActivitiRESTAPI operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a group
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only updating the name of the
            /// group, leaving all other fields unaffected. When an attribute is explicitly
            /// included and is set to null, the group-value will be updated to null.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static GroupResponse UpdateGroup(this IActivitiRESTAPI operations, string groupId, GroupRequest body = default(GroupRequest))
            {
                return operations.UpdateGroupAsync(groupId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a group
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only updating the name of the
            /// group, leaving all other fields unaffected. When an attribute is explicitly
            /// included and is set to null, the group-value will be updated to null.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GroupResponse> UpdateGroupAsync(this IActivitiRESTAPI operations, string groupId, GroupRequest body = default(GroupRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateGroupWithHttpMessagesAsync(groupId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to delete.
            /// </param>
            public static void DeleteGroup(this IActivitiRESTAPI operations, string groupId)
            {
                operations.DeleteGroupAsync(groupId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupAsync(this IActivitiRESTAPI operations, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteGroupWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Add a member to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to add a member to.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MembershipResponse CreateMembership(this IActivitiRESTAPI operations, string groupId, MembershipRequest body = default(MembershipRequest))
            {
                return operations.CreateMembershipAsync(groupId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a member to a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to add a member to.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MembershipResponse> CreateMembershipAsync(this IActivitiRESTAPI operations, string groupId, MembershipRequest body = default(MembershipRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMembershipWithHttpMessagesAsync(groupId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a member from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to remove a member from.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to remove.
            /// </param>
            public static void DeleteMembership(this IActivitiRESTAPI operations, string groupId, string userId)
            {
                operations.DeleteMembershipAsync(groupId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a member from a group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='groupId'>
            /// The id of the group to remove a member from.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to remove.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMembershipAsync(this IActivitiRESTAPI operations, string groupId, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMembershipWithHttpMessagesAsync(groupId, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return group with the given id
            /// </param>
            /// <param name='firstName'>
            /// Only return users with the given firstname
            /// </param>
            /// <param name='lastName'>
            /// Only return users with the given lastname
            /// </param>
            /// <param name='email'>
            /// Only return users with the given email
            /// </param>
            /// <param name='firstNameLike'>
            /// Only return userswith a firstname like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='lastNameLike'>
            /// Only return users with a lastname like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='emailLike'>
            /// Only return users with an email like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='memberOfGroup'>
            /// Only return users which are a member of the given group.
            /// </param>
            /// <param name='potentialStarter'>
            /// Only return users  which members are potential starters for a
            /// process-definition with the given id.
            /// </param>
            /// <param name='sort'>
            /// Field  to sort on, to be used together with the order. Possible values
            /// include: 'id', 'firstName', 'lastname', 'email'
            /// </param>
            public static DataResponse GetUsers(this IActivitiRESTAPI operations, string id = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string firstNameLike = default(string), string lastNameLike = default(string), string emailLike = default(string), string memberOfGroup = default(string), string potentialStarter = default(string), string sort = default(string))
            {
                return operations.GetUsersAsync(id, firstName, lastName, email, firstNameLike, lastNameLike, emailLike, memberOfGroup, potentialStarter, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return group with the given id
            /// </param>
            /// <param name='firstName'>
            /// Only return users with the given firstname
            /// </param>
            /// <param name='lastName'>
            /// Only return users with the given lastname
            /// </param>
            /// <param name='email'>
            /// Only return users with the given email
            /// </param>
            /// <param name='firstNameLike'>
            /// Only return userswith a firstname like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='lastNameLike'>
            /// Only return users with a lastname like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='emailLike'>
            /// Only return users with an email like the given value. Use % as
            /// wildcard-character.
            /// </param>
            /// <param name='memberOfGroup'>
            /// Only return users which are a member of the given group.
            /// </param>
            /// <param name='potentialStarter'>
            /// Only return users  which members are potential starters for a
            /// process-definition with the given id.
            /// </param>
            /// <param name='sort'>
            /// Field  to sort on, to be used together with the order. Possible values
            /// include: 'id', 'firstName', 'lastname', 'email'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetUsersAsync(this IActivitiRESTAPI operations, string id = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string firstNameLike = default(string), string lastNameLike = default(string), string emailLike = default(string), string memberOfGroup = default(string), string potentialStarter = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(id, firstName, lastName, email, firstNameLike, lastNameLike, emailLike, memberOfGroup, potentialStarter, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserResponse CreateUser(this IActivitiRESTAPI operations, UserRequest body = default(UserRequest))
            {
                return operations.CreateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserResponse> CreateUserAsync(this IActivitiRESTAPI operations, UserRequest body = default(UserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get.
            /// </param>
            public static UserResponse GetUser(this IActivitiRESTAPI operations, string userId)
            {
                return operations.GetUserAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserResponse> GetUserAsync(this IActivitiRESTAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a user
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the
            /// firstName attribute in the request body JSON-object, only updating the
            /// firstName of the user, leaving all other fields unaffected. When an
            /// attribute is explicitly included and is set to null, the user-value will be
            /// updated to null. Example: {"firstName" : null} will clear the firstName of
            /// the user).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserResponse UpdateUser(this IActivitiRESTAPI operations, string userId, UserRequest body = default(UserRequest))
            {
                return operations.UpdateUserAsync(userId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a user
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the
            /// firstName attribute in the request body JSON-object, only updating the
            /// firstName of the user, leaving all other fields unaffected. When an
            /// attribute is explicitly included and is set to null, the user-value will be
            /// updated to null. Example: {"firstName" : null} will clear the firstName of
            /// the user).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserResponse> UpdateUserAsync(this IActivitiRESTAPI operations, string userId, UserRequest body = default(UserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserWithHttpMessagesAsync(userId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to delete.
            /// </param>
            public static void DeleteUser(this IActivitiRESTAPI operations, string userId)
            {
                operations.DeleteUserAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsync(this IActivitiRESTAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the info for.
            /// </param>
            public static IList<UserInfoResponse> ListUsersInfo(this IActivitiRESTAPI operations, string userId)
            {
                return operations.ListUsersInfoAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the info for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<UserInfoResponse>> ListUsersInfoAsync(this IActivitiRESTAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsersInfoWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new user�s info entry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to create the info for.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserInfoResponse CreateUserInfo(this IActivitiRESTAPI operations, string userId, UserInfoRequest body = default(UserInfoRequest))
            {
                return operations.CreateUserInfoAsync(userId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new user�s info entry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to create the info for.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfoResponse> CreateUserInfoAsync(this IActivitiRESTAPI operations, string userId, UserInfoRequest body = default(UserInfoRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserInfoWithHttpMessagesAsync(userId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to get.
            /// </param>
            public static UserInfoResponse GetUserInfo(this IActivitiRESTAPI operations, string userId, string key)
            {
                return operations.GetUserInfoAsync(userId, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfoResponse> GetUserInfoAsync(this IActivitiRESTAPI operations, string userId, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserInfoWithHttpMessagesAsync(userId, key, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to update the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to update.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static UserInfoResponse UpdateUserInfo(this IActivitiRESTAPI operations, string userId, string key, UserInfoRequest body = default(UserInfoRequest))
            {
                return operations.UpdateUserInfoAsync(userId, key, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to update the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to update.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserInfoResponse> UpdateUserInfoAsync(this IActivitiRESTAPI operations, string userId, string key, UserInfoRequest body = default(UserInfoRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserInfoWithHttpMessagesAsync(userId, key, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to delete the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to delete.
            /// </param>
            public static void DeleteUserInfo(this IActivitiRESTAPI operations, string userId, string key)
            {
                operations.DeleteUserInfoAsync(userId, key).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a user�s info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to delete the info for.
            /// </param>
            /// <param name='key'>
            /// The key of the user info to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserInfoAsync(this IActivitiRESTAPI operations, string userId, string key, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserInfoWithHttpMessagesAsync(userId, key, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a user�s picture
            /// </summary>
            /// <remarks>
            /// The response body contains the raw picture data, representing the user�s
            /// picture. The Content-type of the response corresponds to the mimeType that
            /// was set when creating the picture.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the picture for.
            /// </param>
            public static IList<byte[]> GetUserPicture(this IActivitiRESTAPI operations, string userId)
            {
                return operations.GetUserPictureAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a user�s picture
            /// </summary>
            /// <remarks>
            /// The response body contains the raw picture data, representing the user�s
            /// picture. The Content-type of the response corresponds to the mimeType that
            /// was set when creating the picture.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the picture for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetUserPictureAsync(this IActivitiRESTAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserPictureWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updating a user�s picture
            /// </summary>
            /// <remarks>
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the picture. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// mimeType: Optional mime-type for the uploaded picture. If omitted, the
            /// default of image/jpeg is used as a mime-type for the picture.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the picture for.
            /// </param>
            public static void UpdateUserPicture(this IActivitiRESTAPI operations, string userId)
            {
                operations.UpdateUserPictureAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updating a user�s picture
            /// </summary>
            /// <remarks>
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the picture. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// mimeType: Optional mime-type for the uploaded picture. If omitted, the
            /// default of image/jpeg is used as a mime-type for the picture.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The id of the user to get the picture for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateUserPictureAsync(this IActivitiRESTAPI operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateUserPictureWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a list of deadletter jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            public static DataResponse ListDeadLetterJobs(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string))
            {
                return operations.ListDeadLetterJobsAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of deadletter jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListDeadLetterJobsAsync(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeadLetterJobsWithHttpMessagesAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static JobResponse GetDeadletterJob(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetDeadletterJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetDeadletterJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeadletterJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static void DeleteDeadLetterJob(this IActivitiRESTAPI operations, string jobId)
            {
                operations.DeleteDeadLetterJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeadLetterJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeadLetterJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the exception stacktrace for a deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static string GetDeadLetterJobStacktrace(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetDeadLetterJobStacktraceAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the exception stacktrace for a deadletter job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDeadLetterJobStacktraceAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeadLetterJobStacktraceWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get engine info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ProcessEngineInfoResponse GetEngineInfo(this IActivitiRESTAPI operations)
            {
                return operations.GetEngineInfoAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get engine info
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessEngineInfoResponse> GetEngineInfoAsync(this IActivitiRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEngineInfoWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            public static DataResponse ListJobs(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string))
            {
                return operations.ListJobsAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListJobsAsync(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListJobsWithHttpMessagesAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The id of the job to get.
            /// </param>
            public static JobResponse GetJob(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The id of the job to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute a single job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='actionRequest'>
            /// Action to perform. Only execute is supported.
            /// </param>
            public static void ExecuteJobAction(this IActivitiRESTAPI operations, string jobId, RestActionRequest actionRequest = default(RestActionRequest))
            {
                operations.ExecuteJobActionAsync(jobId, actionRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute a single job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='actionRequest'>
            /// Action to perform. Only execute is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExecuteJobActionAsync(this IActivitiRESTAPI operations, string jobId, RestActionRequest actionRequest = default(RestActionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExecuteJobActionWithHttpMessagesAsync(jobId, actionRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete a job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The id of the job to delete.
            /// </param>
            public static void DeleteJob(this IActivitiRESTAPI operations, string jobId)
            {
                operations.DeleteJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The id of the job to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the exception stacktrace for a job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Id of the job to get the stacktrace for.
            /// </param>
            public static string GetJobStacktrace(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetJobStacktraceAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the exception stacktrace for a job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// Id of the job to get the stacktrace for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetJobStacktraceAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobStacktraceWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get engine properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IDictionary<string, string> GetProperties(this IActivitiRESTAPI operations)
            {
                return operations.GetPropertiesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get engine properties
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> GetPropertiesAsync(this IActivitiRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertiesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of suspended jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            public static DataResponse ListSuspendedJobs(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string))
            {
                return operations.ListSuspendedJobsAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of suspended jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListSuspendedJobsAsync(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSuspendedJobsWithHttpMessagesAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single suspended job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static JobResponse GetSuspendedJob(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetSuspendedJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single suspended job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetSuspendedJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSuspendedJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the exception stacktrace for a suspended job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static string GetSuspendedJobStacktrace(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetSuspendedJobStacktraceAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the exception stacktrace for a suspended job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSuspendedJobStacktraceAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSuspendedJobStacktraceWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of tables
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TableResponse> GetTables(this IActivitiRESTAPI operations)
            {
                return operations.GetTablesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of tables
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TableResponse>> GetTablesAsync(this IActivitiRESTAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTablesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            public static TableResponse GetTable(this IActivitiRESTAPI operations, string tableName)
            {
                return operations.GetTableAsync(tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TableResponse> GetTableAsync(this IActivitiRESTAPI operations, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableWithHttpMessagesAsync(tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get column info for a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            public static TableMetaData GetTableMetaData(this IActivitiRESTAPI operations, string tableName)
            {
                return operations.GetTableMetaDataAsync(tableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get column info for a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TableMetaData> GetTableMetaDataAsync(this IActivitiRESTAPI operations, string tableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableMetaDataWithHttpMessagesAsync(tableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get row data for a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            /// <param name='start'>
            /// Index of the first row to fetch. Defaults to 0.
            /// </param>
            /// <param name='size'>
            /// Number of rows to fetch, starting from start. Defaults to 10.
            /// </param>
            /// <param name='orderAscendingColumn'>
            /// Name of the column to sort the resulting rows on, ascending.
            /// </param>
            /// <param name='orderDescendingColumn'>
            /// Name of the column to sort the resulting rows on, descending.
            /// </param>
            public static DataResponse GetTableData(this IActivitiRESTAPI operations, string tableName, int? start = default(int?), int? size = default(int?), string orderAscendingColumn = default(string), string orderDescendingColumn = default(string))
            {
                return operations.GetTableDataAsync(tableName, start, size, orderAscendingColumn, orderDescendingColumn).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get row data for a single table
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tableName'>
            /// The name of the table to get.
            /// </param>
            /// <param name='start'>
            /// Index of the first row to fetch. Defaults to 0.
            /// </param>
            /// <param name='size'>
            /// Number of rows to fetch, starting from start. Defaults to 10.
            /// </param>
            /// <param name='orderAscendingColumn'>
            /// Name of the column to sort the resulting rows on, ascending.
            /// </param>
            /// <param name='orderDescendingColumn'>
            /// Name of the column to sort the resulting rows on, descending.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetTableDataAsync(this IActivitiRESTAPI operations, string tableName, int? start = default(int?), int? size = default(int?), string orderAscendingColumn = default(string), string orderDescendingColumn = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTableDataWithHttpMessagesAsync(tableName, start, size, orderAscendingColumn, orderDescendingColumn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of timer jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            public static DataResponse ListTimerJobs(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string))
            {
                return operations.ListTimerJobsAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of timer jobs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return job with the given id
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return jobs part of a process with the given id
            /// </param>
            /// <param name='executionId'>
            /// Only return jobs part of an execution with the given id
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return jobs with the given process definition id
            /// </param>
            /// <param name='timersOnly'>
            /// If true, only return jobs which are timers. If false, this parameter is
            /// ignored. Cannot be used together with 'messagesOnly'.
            /// </param>
            /// <param name='messagesOnly'>
            /// If true, only return jobs which are messages. If false, this parameter is
            /// ignored. Cannot be used together with 'timersOnly'
            /// </param>
            /// <param name='withException'>
            /// If true, only return jobs for which an exception occurred while executing
            /// it. If false, this parameter is ignored.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return jobs which are due to be executed before the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return jobs which are due to be executed after the given date. Jobs
            /// without duedate are never returned using this parameter.
            /// </param>
            /// <param name='exceptionMessage'>
            /// Only return jobs with the given exception message
            /// </param>
            /// <param name='tenantId'>
            /// Only return jobs with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return jobs with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns jobs without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='locked'>
            /// If true, only return jobs which are locked.  If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='unlocked'>
            /// If true, only return jobs which are unlocked. If false, this parameter is
            /// ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'dueDate', 'executionId', 'processInstanceId', 'retries',
            /// 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> ListTimerJobsAsync(this IActivitiRESTAPI operations, string id = default(string), string processInstanceId = default(string), string executionId = default(string), string processDefinitionId = default(string), bool? timersOnly = default(bool?), bool? messagesOnly = default(bool?), bool? withException = default(bool?), string dueBefore = default(string), string dueAfter = default(string), string exceptionMessage = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), bool? locked = default(bool?), bool? unlocked = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTimerJobsWithHttpMessagesAsync(id, processInstanceId, executionId, processDefinitionId, timersOnly, messagesOnly, withException, dueBefore, dueAfter, exceptionMessage, tenantId, tenantIdLike, withoutTenantId, locked, unlocked, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static JobResponse GetTimerJob(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetTimerJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobResponse> GetTimerJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimerJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static void DeleteTimerJob(this IActivitiRESTAPI operations, string jobId)
            {
                operations.DeleteTimerJobAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTimerJobAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTimerJobWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the exception stacktrace for a timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            public static string GetTimerJobStacktrace(this IActivitiRESTAPI operations, string jobId)
            {
                return operations.GetTimerJobStacktraceAsync(jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the exception stacktrace for a timer job
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTimerJobStacktraceAsync(this IActivitiRESTAPI operations, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTimerJobStacktraceWithHttpMessagesAsync(jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query executions
            /// </summary>
            /// <remarks>
            /// The request body can contain all possible filters that can be used in the
            /// List executions URL query. On top of these, it�s possible to provide an
            /// array of variables and processInstanceVariables to include in the query,
            /// with their format described here.
            ///
            /// The general paging and sorting query-parameters can be used for this URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryExecutions(this IActivitiRESTAPI operations, ExecutionQueryRequest body = default(ExecutionQueryRequest))
            {
                return operations.QueryExecutionsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query executions
            /// </summary>
            /// <remarks>
            /// The request body can contain all possible filters that can be used in the
            /// List executions URL query. On top of these, it�s possible to provide an
            /// array of variables and processInstanceVariables to include in the query,
            /// with their format described here.
            ///
            /// The general paging and sorting query-parameters can be used for this URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryExecutionsAsync(this IActivitiRESTAPI operations, ExecutionQueryRequest body = default(ExecutionQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryExecutionsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for historic activity instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic task instances, but
            /// passed in as JSON-body arguments rather than URL-parameters to allow for
            /// more advanced querying and preventing errors with request-uri�s that are
            /// too long.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryActivityInstances(this IActivitiRESTAPI operations, HistoricActivityInstanceQueryRequest body = default(HistoricActivityInstanceQueryRequest))
            {
                return operations.QueryActivityInstancesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for historic activity instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic task instances, but
            /// passed in as JSON-body arguments rather than URL-parameters to allow for
            /// more advanced querying and preventing errors with request-uri�s that are
            /// too long.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryActivityInstancesAsync(this IActivitiRESTAPI operations, HistoricActivityInstanceQueryRequest body = default(HistoricActivityInstanceQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryActivityInstancesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for historic details
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryHistoricDetail(this IActivitiRESTAPI operations, HistoricDetailQueryRequest body = default(HistoricDetailQueryRequest))
            {
                return operations.QueryHistoricDetailAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for historic details
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryHistoricDetailAsync(this IActivitiRESTAPI operations, HistoricDetailQueryRequest body = default(HistoricDetailQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryHistoricDetailWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for historic process instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long. On top of that, the query allows for filtering based on
            /// process variables. The variables property is a JSON-array containing
            /// objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryHistoricProcessInstance(this IActivitiRESTAPI operations, HistoricProcessInstanceQueryRequest body = default(HistoricProcessInstanceQueryRequest))
            {
                return operations.QueryHistoricProcessInstanceAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for historic process instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long. On top of that, the query allows for filtering based on
            /// process variables. The variables property is a JSON-array containing
            /// objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryHistoricProcessInstanceAsync(this IActivitiRESTAPI operations, HistoricProcessInstanceQueryRequest body = default(HistoricProcessInstanceQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryHistoricProcessInstanceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for historic task instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic task instances, but
            /// passed in as JSON-body arguments rather than URL-parameters to allow for
            /// more advanced querying and preventing errors with request-uri�s that are
            /// too long. On top of that, the query allows for filtering based on process
            /// variables. The taskVariables and processVariables properties are
            /// JSON-arrays containing objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryHistoricTaskInstance(this IActivitiRESTAPI operations, HistoricTaskInstanceQueryRequest body = default(HistoricTaskInstanceQueryRequest))
            {
                return operations.QueryHistoricTaskInstanceAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for historic task instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic task instances, but
            /// passed in as JSON-body arguments rather than URL-parameters to allow for
            /// more advanced querying and preventing errors with request-uri�s that are
            /// too long. On top of that, the query allows for filtering based on process
            /// variables. The taskVariables and processVariables properties are
            /// JSON-arrays containing objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryHistoricTaskInstanceAsync(this IActivitiRESTAPI operations, HistoricTaskInstanceQueryRequest body = default(HistoricTaskInstanceQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryHistoricTaskInstanceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for historic variable instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long. On top of that, the query allows for filtering based on
            /// process variables. The variables property is a JSON-array containing
            /// objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryVariableInstances(this IActivitiRESTAPI operations, HistoricVariableInstanceQueryRequest body = default(HistoricVariableInstanceQueryRequest))
            {
                return operations.QueryVariableInstancesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for historic variable instances
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of historic process instances,
            /// but passed in as JSON-body arguments rather than URL-parameters to allow
            /// for more advanced querying and preventing errors with request-uri�s that
            /// are too long. On top of that, the query allows for filtering based on
            /// process variables. The variables property is a JSON-array containing
            /// objects with the format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryVariableInstancesAsync(this IActivitiRESTAPI operations, HistoricVariableInstanceQueryRequest body = default(HistoricVariableInstanceQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryVariableInstancesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query process instances
            /// </summary>
            /// <remarks>
            /// The request body can contain all possible filters that can be used in the
            /// List process instances URL query. On top of these, it�s possible to provide
            /// an array of variables to include in the query, with their format described
            /// here.
            ///
            /// The general paging and sorting query-parameters can be used for this URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse QueryProcessInstances(this IActivitiRESTAPI operations, ProcessInstanceQueryRequest body = default(ProcessInstanceQueryRequest))
            {
                return operations.QueryProcessInstancesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query process instances
            /// </summary>
            /// <remarks>
            /// The request body can contain all possible filters that can be used in the
            /// List process instances URL query. On top of these, it�s possible to provide
            /// an array of variables to include in the query, with their format described
            /// here.
            ///
            /// The general paging and sorting query-parameters can be used for this URL.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> QueryProcessInstancesAsync(this IActivitiRESTAPI operations, ProcessInstanceQueryRequest body = default(ProcessInstanceQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryProcessInstancesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query for tasks
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of tasks (except for
            /// candidateGroupIn which is only available in this POST task query REST
            /// service), but passed in as JSON-body arguments rather than URL-parameters
            /// to allow for more advanced querying and preventing errors with
            /// request-uri�s that are too long. On top of that, the query allows for
            /// filtering based on task and process variables. The taskVariables and
            /// processInstanceVariables are both JSON-arrays containing objects with the
            /// format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static DataResponse GetQueryResult(this IActivitiRESTAPI operations, TaskQueryRequest body = default(TaskQueryRequest))
            {
                return operations.GetQueryResultAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query for tasks
            /// </summary>
            /// <remarks>
            /// All supported JSON parameter fields allowed are exactly the same as the
            /// parameters found for getting a collection of tasks (except for
            /// candidateGroupIn which is only available in this POST task query REST
            /// service), but passed in as JSON-body arguments rather than URL-parameters
            /// to allow for more advanced querying and preventing errors with
            /// request-uri�s that are too long. On top of that, the query allows for
            /// filtering based on task and process variables. The taskVariables and
            /// processInstanceVariables are both JSON-arrays containing objects with the
            /// format as described here.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetQueryResultAsync(this IActivitiRESTAPI operations, TaskQueryRequest body = default(TaskQueryRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetQueryResultWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of Deployments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Only return deployments with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return deployments with a name like the given name.
            /// </param>
            /// <param name='category'>
            /// Only return deployments with the given category.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return deployments which don�t have the given category.
            /// </param>
            /// <param name='tenantId'>
            /// Only return deployments with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return deployments with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns deployments without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'name', 'deployTime', 'tenantId'
            /// </param>
            public static DataResponse GetDeployments(this IActivitiRESTAPI operations, string name = default(string), string nameLike = default(string), string category = default(string), string categoryNotEquals = default(string), string tenantId = default(string), string tenantIdLike = default(string), string withoutTenantId = default(string), string sort = default(string))
            {
                return operations.GetDeploymentsAsync(name, nameLike, category, categoryNotEquals, tenantId, tenantIdLike, withoutTenantId, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of Deployments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Only return deployments with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return deployments with a name like the given name.
            /// </param>
            /// <param name='category'>
            /// Only return deployments with the given category.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return deployments which don�t have the given category.
            /// </param>
            /// <param name='tenantId'>
            /// Only return deployments with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return deployments with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns deployments without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'name', 'deployTime', 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetDeploymentsAsync(this IActivitiRESTAPI operations, string name = default(string), string nameLike = default(string), string category = default(string), string categoryNotEquals = default(string), string tenantId = default(string), string tenantIdLike = default(string), string withoutTenantId = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentsWithHttpMessagesAsync(name, nameLike, category, categoryNotEquals, tenantId, tenantIdLike, withoutTenantId, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new deployment
            /// </summary>
            /// <remarks>
            /// The request body should contain data of type multipart/form-data. There
            /// should be exactly one file in the request, any additional files will be
            /// ignored. If multiple resources need to be deployed in a single deployment,
            /// compress the resources in a zip and make sure the file-name ends with .bar
            /// or .zip.
            ///
            /// An additional parameter (form-field) can be passed in the request body with
            /// name tenantId. The value of this field will be used as the id of the tenant
            /// this deployment is done in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            public static DeploymentResponse UploadDeployment(this IActivitiRESTAPI operations, string tenantId = default(string))
            {
                return operations.UploadDeploymentAsync(tenantId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new deployment
            /// </summary>
            /// <remarks>
            /// The request body should contain data of type multipart/form-data. There
            /// should be exactly one file in the request, any additional files will be
            /// ignored. If multiple resources need to be deployed in a single deployment,
            /// compress the resources in a zip and make sure the file-name ends with .bar
            /// or .zip.
            ///
            /// An additional parameter (form-field) can be passed in the request body with
            /// name tenantId. The value of this field will be used as the id of the tenant
            /// this deployment is done in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentResponse> UploadDeploymentAsync(this IActivitiRESTAPI operations, string tenantId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadDeploymentWithHttpMessagesAsync(tenantId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to get.
            /// </param>
            public static DeploymentResponse GetDeployment(this IActivitiRESTAPI operations, string deploymentId)
            {
                return operations.GetDeploymentAsync(deploymentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentResponse> GetDeploymentAsync(this IActivitiRESTAPI operations, string deploymentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(deploymentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to delete.
            /// </param>
            /// <param name='cascade'>
            /// </param>
            public static void DeleteDeployment(this IActivitiRESTAPI operations, string deploymentId, bool? cascade = default(bool?))
            {
                operations.DeleteDeploymentAsync(deploymentId, cascade).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to delete.
            /// </param>
            /// <param name='cascade'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteDeploymentAsync(this IActivitiRESTAPI operations, string deploymentId, bool? cascade = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteDeploymentWithHttpMessagesAsync(deploymentId, cascade, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a deployment resource content
            /// </summary>
            /// <remarks>
            /// The response body will contain the binary resource-content for the
            /// requested resource. The response content-type will be the same as the type
            /// returned in the resources mimeType property. Also, a content-disposition
            /// header is set, allowing browsers to download the file instead of displaying
            /// it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment the requested resource is part of.
            /// </param>
            /// <param name='resourceId'>
            /// The id of the resource to get the data for. Make sure you URL-encode the
            /// resourceId in case it contains forward slashes. Eg: use
            /// diagrams%2Fmy-process.bpmn20.xml instead of
            /// diagrams/Fmy-process.bpmn20.xml.
            /// </param>
            public static IList<byte[]> GetDeploymentResourceData(this IActivitiRESTAPI operations, string deploymentId, string resourceId)
            {
                return operations.GetDeploymentResourceDataAsync(deploymentId, resourceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment resource content
            /// </summary>
            /// <remarks>
            /// The response body will contain the binary resource-content for the
            /// requested resource. The response content-type will be the same as the type
            /// returned in the resources mimeType property. Also, a content-disposition
            /// header is set, allowing browsers to download the file instead of displaying
            /// it.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment the requested resource is part of.
            /// </param>
            /// <param name='resourceId'>
            /// The id of the resource to get the data for. Make sure you URL-encode the
            /// resourceId in case it contains forward slashes. Eg: use
            /// diagrams%2Fmy-process.bpmn20.xml instead of
            /// diagrams/Fmy-process.bpmn20.xml.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetDeploymentResourceDataAsync(this IActivitiRESTAPI operations, string deploymentId, string resourceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentResourceDataWithHttpMessagesAsync(deploymentId, resourceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List resources in a deployment
            /// </summary>
            /// <remarks>
            /// The dataUrl property in the resulting JSON for a single resource contains
            /// the actual URL to use for retrieving the binary resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to get the resources for.
            /// </param>
            public static IList<DeploymentResourceResponse> GetDeploymentResources(this IActivitiRESTAPI operations, string deploymentId)
            {
                return operations.GetDeploymentResourcesAsync(deploymentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List resources in a deployment
            /// </summary>
            /// <remarks>
            /// The dataUrl property in the resulting JSON for a single resource contains
            /// the actual URL to use for retrieving the binary resource.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment to get the resources for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DeploymentResourceResponse>> GetDeploymentResourcesAsync(this IActivitiRESTAPI operations, string deploymentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentResourcesWithHttpMessagesAsync(deploymentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment resource
            /// </summary>
            /// <remarks>
            /// Replace ** by ResourceId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment the requested resource is part of.
            /// </param>
            public static DeploymentResourceResponse GetDeploymentResource(this IActivitiRESTAPI operations, string deploymentId)
            {
                return operations.GetDeploymentResourceAsync(deploymentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment resource
            /// </summary>
            /// <remarks>
            /// Replace ** by ResourceId
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deploymentId'>
            /// The id of the deployment the requested resource is part of.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeploymentResourceResponse> GetDeploymentResourceAsync(this IActivitiRESTAPI operations, string deploymentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentResourceWithHttpMessagesAsync(deploymentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a list of models
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='category'>
            /// Only return models with the given category.
            /// </param>
            /// <param name='categoryLike'>
            /// Only return models with a category like the given name.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return models which don�t have the given category.
            /// </param>
            /// <param name='name'>
            /// Only return models with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return models with a name like the given name.
            /// </param>
            /// <param name='key'>
            /// Only return models with the given key.
            /// </param>
            /// <param name='deploymentId'>
            /// Only return models with the given category.
            /// </param>
            /// <param name='version'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='latestVersion'>
            /// If true, only return models which are the latest version. Best used in
            /// combination with key. If false is passed in as value, this is ignored and
            /// all versions are returned.
            /// </param>
            /// <param name='deployed'>
            /// If true, only deployed models are returned. If false, only undeployed
            /// models are returned (deploymentId is null).
            /// </param>
            /// <param name='tenantId'>
            /// Only return models with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return models with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns models without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'category', 'createTime', 'key', 'lastUpdateTime', 'name',
            /// 'version', 'tenantId'
            /// </param>
            public static DataResponse GetModels(this IActivitiRESTAPI operations, string id = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string name = default(string), string nameLike = default(string), string key = default(string), string deploymentId = default(string), int? version = default(int?), bool? latestVersion = default(bool?), bool? deployed = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string))
            {
                return operations.GetModelsAsync(id, category, categoryLike, categoryNotEquals, name, nameLike, key, deploymentId, version, latestVersion, deployed, tenantId, tenantIdLike, withoutTenantId, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a list of models
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='category'>
            /// Only return models with the given category.
            /// </param>
            /// <param name='categoryLike'>
            /// Only return models with a category like the given name.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return models which don�t have the given category.
            /// </param>
            /// <param name='name'>
            /// Only return models with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return models with a name like the given name.
            /// </param>
            /// <param name='key'>
            /// Only return models with the given key.
            /// </param>
            /// <param name='deploymentId'>
            /// Only return models with the given category.
            /// </param>
            /// <param name='version'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='latestVersion'>
            /// If true, only return models which are the latest version. Best used in
            /// combination with key. If false is passed in as value, this is ignored and
            /// all versions are returned.
            /// </param>
            /// <param name='deployed'>
            /// If true, only deployed models are returned. If false, only undeployed
            /// models are returned (deploymentId is null).
            /// </param>
            /// <param name='tenantId'>
            /// Only return models with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return models with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns models without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'category', 'createTime', 'key', 'lastUpdateTime', 'name',
            /// 'version', 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetModelsAsync(this IActivitiRESTAPI operations, string id = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string name = default(string), string nameLike = default(string), string key = default(string), string deploymentId = default(string), int? version = default(int?), bool? latestVersion = default(bool?), bool? deployed = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelsWithHttpMessagesAsync(id, category, categoryLike, categoryNotEquals, name, nameLike, key, deploymentId, version, latestVersion, deployed, tenantId, tenantIdLike, withoutTenantId, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a model
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only setting the name of the
            /// model, leaving all other fields null.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ModelResponse CreateModel(this IActivitiRESTAPI operations, ModelRequest body = default(ModelRequest))
            {
                return operations.CreateModelAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a model
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only setting the name of the
            /// model, leaving all other fields null.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelResponse> CreateModelAsync(this IActivitiRESTAPI operations, ModelRequest body = default(ModelRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateModelWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The id of the model to get.
            /// </param>
            public static ModelResponse GetModel(this IActivitiRESTAPI operations, string modelId)
            {
                return operations.GetModelAsync(modelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The id of the model to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelResponse> GetModelAsync(this IActivitiRESTAPI operations, string modelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelWithHttpMessagesAsync(modelId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a model
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only updating the name of the
            /// model, leaving all other fields unaffected. When an attribute is explicitly
            /// included and is set to null, the model-value will be updated to null.
            /// Example: ```JSON
            /// {"metaInfo" : null}``` will clear the metaInfo of the model).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ModelResponse UpdateModel(this IActivitiRESTAPI operations, string modelId, ModelRequest body = default(ModelRequest))
            {
                return operations.UpdateModelAsync(modelId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a model
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the name
            /// attribute in the request body JSON-object, only updating the name of the
            /// model, leaving all other fields unaffected. When an attribute is explicitly
            /// included and is set to null, the model-value will be updated to null.
            /// Example: ```JSON
            /// {"metaInfo" : null}``` will clear the metaInfo of the model).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelResponse> UpdateModelAsync(this IActivitiRESTAPI operations, string modelId, ModelRequest body = default(ModelRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateModelWithHttpMessagesAsync(modelId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The id of the model to delete.
            /// </param>
            public static void DeleteModel(this IActivitiRESTAPI operations, string modelId)
            {
                operations.DeleteModelAsync(modelId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// The id of the model to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteModelAsync(this IActivitiRESTAPI operations, string modelId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteModelWithHttpMessagesAsync(modelId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of process definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// Only return process definitions with the given version.
            /// </param>
            /// <param name='name'>
            /// Only return process definitions with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return process definitions with a name like the given name.
            /// </param>
            /// <param name='key'>
            /// Only return process definitions with the given key.
            /// </param>
            /// <param name='keyLike'>
            /// Only return process definitions with a name like the given key.
            /// </param>
            /// <param name='resourceName'>
            /// Only return process definitions with the given resource name.
            /// </param>
            /// <param name='resourceNameLike'>
            /// Only return process definitions with a name like the given resource name.
            /// </param>
            /// <param name='category'>
            /// Only return process definitions with the given category.
            /// </param>
            /// <param name='categoryLike'>
            /// Only return process definitions with a category like the given name.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return process definitions which don�t have the given category.
            /// </param>
            /// <param name='deploymentId'>
            /// Only return process definitions with the given category.
            /// </param>
            /// <param name='startableByUser'>
            /// Only return process definitions which are part of a deployment with the
            /// given id.
            /// </param>
            /// <param name='latest'>
            /// Only return the latest process definition versions. Can only be used
            /// together with key and keyLike parameters, using any other parameter will
            /// result in a 400-response.
            /// </param>
            /// <param name='suspended'>
            /// If true, only returns process definitions which are suspended. If false,
            /// only active process definitions (which are not suspended) are returned.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'name', 'id', 'key', 'category', 'deploymentId', 'version'
            /// </param>
            public static DataResponse GetProcessDefinitions(this IActivitiRESTAPI operations, int? version = default(int?), string name = default(string), string nameLike = default(string), string key = default(string), string keyLike = default(string), string resourceName = default(string), string resourceNameLike = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string deploymentId = default(string), string startableByUser = default(string), bool? latest = default(bool?), bool? suspended = default(bool?), string sort = default(string))
            {
                return operations.GetProcessDefinitionsAsync(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of process definitions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='version'>
            /// Only return process definitions with the given version.
            /// </param>
            /// <param name='name'>
            /// Only return process definitions with the given name.
            /// </param>
            /// <param name='nameLike'>
            /// Only return process definitions with a name like the given name.
            /// </param>
            /// <param name='key'>
            /// Only return process definitions with the given key.
            /// </param>
            /// <param name='keyLike'>
            /// Only return process definitions with a name like the given key.
            /// </param>
            /// <param name='resourceName'>
            /// Only return process definitions with the given resource name.
            /// </param>
            /// <param name='resourceNameLike'>
            /// Only return process definitions with a name like the given resource name.
            /// </param>
            /// <param name='category'>
            /// Only return process definitions with the given category.
            /// </param>
            /// <param name='categoryLike'>
            /// Only return process definitions with a category like the given name.
            /// </param>
            /// <param name='categoryNotEquals'>
            /// Only return process definitions which don�t have the given category.
            /// </param>
            /// <param name='deploymentId'>
            /// Only return process definitions with the given category.
            /// </param>
            /// <param name='startableByUser'>
            /// Only return process definitions which are part of a deployment with the
            /// given id.
            /// </param>
            /// <param name='latest'>
            /// Only return the latest process definition versions. Can only be used
            /// together with key and keyLike parameters, using any other parameter will
            /// result in a 400-response.
            /// </param>
            /// <param name='suspended'>
            /// If true, only returns process definitions which are suspended. If false,
            /// only active process definitions (which are not suspended) are returned.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'name', 'id', 'key', 'category', 'deploymentId', 'version'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetProcessDefinitionsAsync(this IActivitiRESTAPI operations, int? version = default(int?), string name = default(string), string nameLike = default(string), string key = default(string), string keyLike = default(string), string resourceName = default(string), string resourceNameLike = default(string), string category = default(string), string categoryLike = default(string), string categoryNotEquals = default(string), string deploymentId = default(string), string startableByUser = default(string), bool? latest = default(bool?), bool? suspended = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessDefinitionsWithHttpMessagesAsync(version, name, nameLike, key, keyLike, resourceName, resourceNameLike, category, categoryLike, categoryNotEquals, deploymentId, startableByUser, latest, suspended, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get.
            /// </param>
            public static ProcessDefinitionResponse GetProcessDefinition(this IActivitiRESTAPI operations, string processDefinitionId)
            {
                return operations.GetProcessDefinitionAsync(processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessDefinitionResponse> GetProcessDefinitionAsync(this IActivitiRESTAPI operations, string processDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessDefinitionWithHttpMessagesAsync(processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute actions for a process definition (Update category, Suspend or
            /// Activate)
            /// </summary>
            /// <remarks>
            /// ## Update category for a process definition
            ///
            /// ```JSON
            /// {
            /// "category" : "updatedcategory"
            /// } ```
            ///
            ///
            /// ## Suspend a process definition
            ///
            /// ```JSON
            /// {
            /// "action" : "suspend",
            /// "includeProcessInstances" : "false",
            /// "date" : "2013-04-15T00:42:12Z"
            /// } ```
            ///
            ///
            /// ## Activate a process definition
            ///
            /// ```JSON
            /// {
            /// "action" : "activate",
            /// "includeProcessInstances" : "true",
            /// "date" : "2013-04-15T00:42:12Z"
            /// } ```
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProcessDefinitionResponse ExecuteProcessDefinitionAction(this IActivitiRESTAPI operations, string processDefinitionId, ProcessDefinitionActionRequest body)
            {
                return operations.ExecuteProcessDefinitionActionAsync(processDefinitionId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute actions for a process definition (Update category, Suspend or
            /// Activate)
            /// </summary>
            /// <remarks>
            /// ## Update category for a process definition
            ///
            /// ```JSON
            /// {
            /// "category" : "updatedcategory"
            /// } ```
            ///
            ///
            /// ## Suspend a process definition
            ///
            /// ```JSON
            /// {
            /// "action" : "suspend",
            /// "includeProcessInstances" : "false",
            /// "date" : "2013-04-15T00:42:12Z"
            /// } ```
            ///
            ///
            /// ## Activate a process definition
            ///
            /// ```JSON
            /// {
            /// "action" : "activate",
            /// "includeProcessInstances" : "true",
            /// "date" : "2013-04-15T00:42:12Z"
            /// } ```
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessDefinitionResponse> ExecuteProcessDefinitionActionAsync(this IActivitiRESTAPI operations, string processDefinitionId, ProcessDefinitionActionRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteProcessDefinitionActionWithHttpMessagesAsync(processDefinitionId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all candidate starters for a process-definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the identity links for.
            /// </param>
            public static IList<RestIdentityLink> GetIdentityLinks(this IActivitiRESTAPI operations, string processDefinitionId)
            {
                return operations.GetIdentityLinksAsync(processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all candidate starters for a process-definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the identity links for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestIdentityLink>> GetIdentityLinksAsync(this IActivitiRESTAPI operations, string processDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIdentityLinksWithHttpMessagesAsync(processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add a candidate starter to a process definition
            /// </summary>
            /// <remarks>
            /// ## For a User
            ///
            /// ```JSON
            /// {
            /// "user" : "kermit"
            /// } ```
            ///
            /// ## For a Group
            ///
            /// ```JSON
            /// {
            /// "groupId" : "sales"
            /// } ```
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RestIdentityLink CreateIdentityLink(this IActivitiRESTAPI operations, string processDefinitionId, RestIdentityLink body = default(RestIdentityLink))
            {
                return operations.CreateIdentityLinkAsync(processDefinitionId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a candidate starter to a process definition
            /// </summary>
            /// <remarks>
            /// ## For a User
            ///
            /// ```JSON
            /// {
            /// "user" : "kermit"
            /// } ```
            ///
            /// ## For a Group
            ///
            /// ```JSON
            /// {
            /// "groupId" : "sales"
            /// } ```
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> CreateIdentityLinkAsync(this IActivitiRESTAPI operations, string processDefinitionId, RestIdentityLink body = default(RestIdentityLink), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIdentityLinkWithHttpMessagesAsync(processDefinitionId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a candidate starter from a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='family'>
            /// Either users or groups, depending on the type of identity link.
            /// </param>
            /// <param name='identityId'>
            /// Either the user or group of the identity to get as candidate starter.
            /// </param>
            public static RestIdentityLink GetIdentityLink(this IActivitiRESTAPI operations, string processDefinitionId, string family, string identityId)
            {
                return operations.GetIdentityLinkAsync(processDefinitionId, family, identityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a candidate starter from a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='family'>
            /// Either users or groups, depending on the type of identity link.
            /// </param>
            /// <param name='identityId'>
            /// Either the user or group of the identity to get as candidate starter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> GetIdentityLinkAsync(this IActivitiRESTAPI operations, string processDefinitionId, string family, string identityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIdentityLinkWithHttpMessagesAsync(processDefinitionId, family, identityId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a candidate starter from a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='family'>
            /// Either users or groups, depending on the type of identity link.
            /// </param>
            /// <param name='identityId'>
            /// Either the user or group of the identity to remove as candidate starter.
            /// </param>
            public static void DeleteIdentityLink(this IActivitiRESTAPI operations, string processDefinitionId, string family, string identityId)
            {
                operations.DeleteIdentityLinkAsync(processDefinitionId, family, identityId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a candidate starter from a process definition
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition.
            /// </param>
            /// <param name='family'>
            /// Either users or groups, depending on the type of identity link.
            /// </param>
            /// <param name='identityId'>
            /// Either the user or group of the identity to remove as candidate starter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIdentityLinkAsync(this IActivitiRESTAPI operations, string processDefinitionId, string family, string identityId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteIdentityLinkWithHttpMessagesAsync(processDefinitionId, family, identityId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a process definition image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// </param>
            public static IList<byte[]> GetModelResource(this IActivitiRESTAPI operations, string processDefinitionId)
            {
                return operations.GetModelResourceAsync(processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a process definition image
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetModelResourceAsync(this IActivitiRESTAPI operations, string processDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelResourceWithHttpMessagesAsync(processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a process definition BPMN model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the model for.
            /// </param>
            public static BpmnModel GetBpmnModelResource(this IActivitiRESTAPI operations, string processDefinitionId)
            {
                return operations.GetBpmnModelResourceAsync(processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a process definition BPMN model
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the model for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BpmnModel> GetBpmnModelResourceAsync(this IActivitiRESTAPI operations, string processDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBpmnModelResourceWithHttpMessagesAsync(processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a process definition resource content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the resource data for.
            /// </param>
            public static IList<byte[]> GetProcessDefinitionResource(this IActivitiRESTAPI operations, string processDefinitionId)
            {
                return operations.GetProcessDefinitionResourceAsync(processDefinitionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a process definition resource content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processDefinitionId'>
            /// The id of the process definition to get the resource data for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetProcessDefinitionResourceAsync(this IActivitiRESTAPI operations, string processDefinitionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessDefinitionResourceWithHttpMessagesAsync(processDefinitionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of executions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='activityId'>
            /// Only return executions with the given activity id.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return process instances with the given process definition key.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return process instances with the given process definition id.
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return executions which are part of the process instance with the
            /// given id.
            /// </param>
            /// <param name='messageEventSubscriptionName'>
            /// Only return executions which are subscribed to a message with the given
            /// name.
            /// </param>
            /// <param name='signalEventSubscriptionName'>
            /// Only return executions which are subscribed to a signal with the given
            /// name.
            /// </param>
            /// <param name='parentId'>
            /// Only return executions which are a direct child of the given execution.
            /// </param>
            /// <param name='tenantId'>
            /// Only return process instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return process instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns process instances without a tenantId set. If false,
            /// the withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'processInstanceId', 'processDefinitionId',
            /// 'processDefinitionKey', 'tenantId'
            /// </param>
            public static DataResponse GetExecutions(this IActivitiRESTAPI operations, string id = default(string), string activityId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string processInstanceId = default(string), string messageEventSubscriptionName = default(string), string signalEventSubscriptionName = default(string), string parentId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string))
            {
                return operations.GetExecutionsAsync(id, activityId, processDefinitionKey, processDefinitionId, processInstanceId, messageEventSubscriptionName, signalEventSubscriptionName, parentId, tenantId, tenantIdLike, withoutTenantId, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of executions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='activityId'>
            /// Only return executions with the given activity id.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return process instances with the given process definition key.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return process instances with the given process definition id.
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return executions which are part of the process instance with the
            /// given id.
            /// </param>
            /// <param name='messageEventSubscriptionName'>
            /// Only return executions which are subscribed to a message with the given
            /// name.
            /// </param>
            /// <param name='signalEventSubscriptionName'>
            /// Only return executions which are subscribed to a signal with the given
            /// name.
            /// </param>
            /// <param name='parentId'>
            /// Only return executions which are a direct child of the given execution.
            /// </param>
            /// <param name='tenantId'>
            /// Only return process instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return process instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns process instances without a tenantId set. If false,
            /// the withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'processInstanceId', 'processDefinitionId',
            /// 'processDefinitionKey', 'tenantId'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetExecutionsAsync(this IActivitiRESTAPI operations, string id = default(string), string activityId = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string processInstanceId = default(string), string messageEventSubscriptionName = default(string), string signalEventSubscriptionName = default(string), string parentId = default(string), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionsWithHttpMessagesAsync(id, activityId, processDefinitionKey, processDefinitionId, processInstanceId, messageEventSubscriptionName, signalEventSubscriptionName, parentId, tenantId, tenantIdLike, withoutTenantId, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Signal event received
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ExecuteExecutionAction(this IActivitiRESTAPI operations, ExecutionActionRequest body = default(ExecutionActionRequest))
            {
                operations.ExecuteExecutionActionAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Signal event received
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExecuteExecutionActionAsync(this IActivitiRESTAPI operations, ExecutionActionRequest body = default(ExecutionActionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExecuteExecutionActionWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to get.
            /// </param>
            public static ExecutionResponse GetExecution(this IActivitiRESTAPI operations, string executionId)
            {
                return operations.GetExecutionAsync(executionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExecutionResponse> GetExecutionAsync(this IActivitiRESTAPI operations, string executionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionWithHttpMessagesAsync(executionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute an action on an execution
            /// </summary>
            /// <remarks>
            /// ## Request body (signal an execution):
            ///
            /// ```JSON
            /// {
            /// "action":"signal"
            /// } ```
            ///
            ///
            /// Both a variables and transientVariables property is accepted with following
            /// structure ```JSON
            /// {
            /// "action":"signal",
            /// "variables" : [
            /// {
            /// "name": "myVar",
            /// "value": "someValue"
            /// }
            /// ]
            /// }```
            ///
            ///
            /// ## Request body (signal event received for execution)
            ///
            /// ```JSON
            /// {
            /// "action":"signal"
            /// } ```
            ///
            ///
            /// Notifies the execution that a signal event has been received, requires a
            /// signalName parameter. Optional variables can be passed that are set on the
            /// execution before the action is executed.## Request body (signal event
            /// received for execution)
            ///
            /// ```JSON
            /// {
            /// "action":"messageEventReceived",
            /// "messageName":"myMessage"
            /// "variables": [  ]
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to execute action on.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ExecutionResponse PerformExecutionAction(this IActivitiRESTAPI operations, string executionId, ExecutionActionRequest body = default(ExecutionActionRequest))
            {
                return operations.PerformExecutionActionAsync(executionId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute an action on an execution
            /// </summary>
            /// <remarks>
            /// ## Request body (signal an execution):
            ///
            /// ```JSON
            /// {
            /// "action":"signal"
            /// } ```
            ///
            ///
            /// Both a variables and transientVariables property is accepted with following
            /// structure ```JSON
            /// {
            /// "action":"signal",
            /// "variables" : [
            /// {
            /// "name": "myVar",
            /// "value": "someValue"
            /// }
            /// ]
            /// }```
            ///
            ///
            /// ## Request body (signal event received for execution)
            ///
            /// ```JSON
            /// {
            /// "action":"signal"
            /// } ```
            ///
            ///
            /// Notifies the execution that a signal event has been received, requires a
            /// signalName parameter. Optional variables can be passed that are set on the
            /// execution before the action is executed.## Request body (signal event
            /// received for execution)
            ///
            /// ```JSON
            /// {
            /// "action":"messageEventReceived",
            /// "messageName":"myMessage"
            /// "variables": [  ]
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to execute action on.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ExecutionResponse> PerformExecutionActionAsync(this IActivitiRESTAPI operations, string executionId, ExecutionActionRequest body = default(ExecutionActionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerformExecutionActionWithHttpMessagesAsync(executionId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get active activities in an execution
            /// </summary>
            /// <remarks>
            /// Returns all activities which are active in the execution and in all
            /// child-executions (and their children, recursively), if any.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to get activities for.
            /// </param>
            public static IList<string> GetActiveActivities(this IActivitiRESTAPI operations, string executionId)
            {
                return operations.GetActiveActivitiesAsync(executionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get active activities in an execution
            /// </summary>
            /// <remarks>
            /// Returns all activities which are active in the execution and in all
            /// child-executions (and their children, recursively), if any.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to get activities for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetActiveActivitiesAsync(this IActivitiRESTAPI operations, string executionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveActivitiesWithHttpMessagesAsync(executionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of variables for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            /// <param name='scope'>
            /// Either local or global. If omitted, both local and global scoped variables
            /// are returned.
            /// </param>
            public static IList<RestVariable> ListExecutionVariables(this IActivitiRESTAPI operations, string executionId, string scope = default(string))
            {
                return operations.ListExecutionVariablesAsync(executionId, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of variables for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            /// <param name='scope'>
            /// Either local or global. If omitted, both local and global scoped variables
            /// are returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestVariable>> ListExecutionVariablesAsync(this IActivitiRESTAPI operations, string executionId, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListExecutionVariablesWithHttpMessagesAsync(executionId, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create variables on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to create the new variable for.
            /// </param>
            public static object CreateExecutionVariable(this IActivitiRESTAPI operations, string executionId)
            {
                return operations.CreateExecutionVariableAsync(executionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create variables on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to create the new variable for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateExecutionVariableAsync(this IActivitiRESTAPI operations, string executionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateExecutionVariableWithHttpMessagesAsync(executionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update variables on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            public static object CreateOrUpdateExecutionVariable(this IActivitiRESTAPI operations, string executionId)
            {
                return operations.CreateOrUpdateExecutionVariableAsync(executionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update variables on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateExecutionVariableAsync(this IActivitiRESTAPI operations, string executionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateExecutionVariableWithHttpMessagesAsync(executionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all variables for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            public static void DeleteLocalVariables(this IActivitiRESTAPI operations, string executionId)
            {
                operations.DeleteLocalVariablesAsync(executionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all variables for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLocalVariablesAsync(this IActivitiRESTAPI operations, string executionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLocalVariablesWithHttpMessagesAsync(executionId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a variable for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// Either local or global. If omitted, local variable is returned (if exists).
            /// If not, a global variable is returned (if exists).
            /// </param>
            public static RestVariable GetExecutionVariable(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string))
            {
                return operations.GetExecutionVariableAsync(executionId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a variable for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// Either local or global. If omitted, local variable is returned (if exists).
            /// If not, a global variable is returned (if exists).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> GetExecutionVariableAsync(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionVariableWithHttpMessagesAsync(executionId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a variable on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to create the new variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to update.
            /// </param>
            public static RestVariable UpdateExecutionVariable(this IActivitiRESTAPI operations, string executionId, string variableName)
            {
                return operations.UpdateExecutionVariableAsync(executionId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a variable on an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// The id of the execution to create the new variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> UpdateExecutionVariableAsync(this IActivitiRESTAPI operations, string executionId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateExecutionVariableWithHttpMessagesAsync(executionId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a variable for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static void DeletedExecutionVariable(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string))
            {
                operations.DeletedExecutionVariableAsync(executionId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a variable for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletedExecutionVariableAsync(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeletedExecutionVariableWithHttpMessagesAsync(executionId, variableName, scope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the binary data for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static IList<byte[]> GetExecutionVariableData(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string))
            {
                return operations.GetExecutionVariableDataAsync(executionId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for an execution
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='executionId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetExecutionVariableDataAsync(this IActivitiRESTAPI operations, string executionId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExecutionVariableDataWithHttpMessagesAsync(executionId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of process instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return process instances with the given process definition key.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return process instances with the given process definition id.
            /// </param>
            /// <param name='businessKey'>
            /// Only return process instances with the given businessKey.
            /// </param>
            /// <param name='involvedUser'>
            /// Only return process instances in which the given user is involved.
            /// </param>
            /// <param name='suspended'>
            /// If true, only return process instance which are suspended. If false, only
            /// return process instances which are not suspended (active).
            /// </param>
            /// <param name='superProcessInstanceId'>
            /// Only return process instances which have the given super process-instance
            /// id (for processes that have a call-activities).
            /// </param>
            /// <param name='subProcessInstanceId'>
            /// Only return process instances which have the given sub process-instance id
            /// (for processes started as a call-activity).
            /// </param>
            /// <param name='excludeSubprocesses'>
            /// Return only process instances which aren�t sub processes.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// Indication to include process variables in the result.
            /// </param>
            /// <param name='tenantId'>
            /// Only return process instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return process instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns process instances without a tenantId set. If false,
            /// the withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'processDefinitionId', 'tenantId', 'processDefinitionKey'
            /// </param>
            public static DataResponse GetProcessInstances(this IActivitiRESTAPI operations, string id = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? suspended = default(bool?), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string))
            {
                return operations.GetProcessInstancesAsync(id, processDefinitionKey, processDefinitionId, businessKey, involvedUser, suspended, superProcessInstanceId, subProcessInstanceId, excludeSubprocesses, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, sort).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of process instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return process instances with the given process definition key.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return process instances with the given process definition id.
            /// </param>
            /// <param name='businessKey'>
            /// Only return process instances with the given businessKey.
            /// </param>
            /// <param name='involvedUser'>
            /// Only return process instances in which the given user is involved.
            /// </param>
            /// <param name='suspended'>
            /// If true, only return process instance which are suspended. If false, only
            /// return process instances which are not suspended (active).
            /// </param>
            /// <param name='superProcessInstanceId'>
            /// Only return process instances which have the given super process-instance
            /// id (for processes that have a call-activities).
            /// </param>
            /// <param name='subProcessInstanceId'>
            /// Only return process instances which have the given sub process-instance id
            /// (for processes started as a call-activity).
            /// </param>
            /// <param name='excludeSubprocesses'>
            /// Return only process instances which aren�t sub processes.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// Indication to include process variables in the result.
            /// </param>
            /// <param name='tenantId'>
            /// Only return process instances with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return process instances with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns process instances without a tenantId set. If false,
            /// the withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='sort'>
            /// Property to sort on, to be used together with the order. Possible values
            /// include: 'id', 'processDefinitionId', 'tenantId', 'processDefinitionKey'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetProcessInstancesAsync(this IActivitiRESTAPI operations, string id = default(string), string processDefinitionKey = default(string), string processDefinitionId = default(string), string businessKey = default(string), string involvedUser = default(string), bool? suspended = default(bool?), string superProcessInstanceId = default(string), string subProcessInstanceId = default(string), bool? excludeSubprocesses = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstancesWithHttpMessagesAsync(id, processDefinitionKey, processDefinitionId, businessKey, involvedUser, suspended, superProcessInstanceId, subProcessInstanceId, excludeSubprocesses, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, sort, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start a process instance
            /// </summary>
            /// <remarks>
            /// ## Request body (start by process definition id)
            ///
            /// ```JSON
            /// {
            /// "processDefinitionId":"oneTaskProcess:1:158",
            /// "businessKey":"myBusinessKey",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// ## Request body (start by process definition key)
            ///
            /// ```JSON
            /// {
            /// "processDefinitionKey":"oneTaskProcess",
            /// "businessKey":"myBusinessKey",
            /// "tenantId": "tenant1",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// ## Request body (start by message)
            ///
            /// ```JSON
            /// {
            /// "message":"newOrderMessage",
            /// "businessKey":"myBusinessKey",
            /// "tenantId": "tenant1",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// Note that also a *transientVariables* property is accepted as part of this
            /// json, that follows the same structure as the *variables* property.
            ///
            /// Only one of *processDefinitionId*, *processDefinitionKey* or *message* can
            /// be used in the request body. Parameters *businessKey*, *variables* and
            /// *tenantId* are optional. If tenantId is omitted, the default tenant will be
            /// used. More information about the variable format can be found in the REST
            /// variables section. Note that the variable-scope that is supplied is
            /// ignored, process-variables are always local.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProcessInstanceResponse CreateProcessInstance(this IActivitiRESTAPI operations, ProcessInstanceCreateRequest body = default(ProcessInstanceCreateRequest))
            {
                return operations.CreateProcessInstanceAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start a process instance
            /// </summary>
            /// <remarks>
            /// ## Request body (start by process definition id)
            ///
            /// ```JSON
            /// {
            /// "processDefinitionId":"oneTaskProcess:1:158",
            /// "businessKey":"myBusinessKey",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// ## Request body (start by process definition key)
            ///
            /// ```JSON
            /// {
            /// "processDefinitionKey":"oneTaskProcess",
            /// "businessKey":"myBusinessKey",
            /// "tenantId": "tenant1",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// ## Request body (start by message)
            ///
            /// ```JSON
            /// {
            /// "message":"newOrderMessage",
            /// "businessKey":"myBusinessKey",
            /// "tenantId": "tenant1",
            /// "variables": [
            /// {
            /// "name":"myVar",
            /// "value":"This is a variable",
            /// }
            /// ]
            /// }```
            ///
            /// Note that also a *transientVariables* property is accepted as part of this
            /// json, that follows the same structure as the *variables* property.
            ///
            /// Only one of *processDefinitionId*, *processDefinitionKey* or *message* can
            /// be used in the request body. Parameters *businessKey*, *variables* and
            /// *tenantId* are optional. If tenantId is omitted, the default tenant will be
            /// used. More information about the variable format can be found in the REST
            /// variables section. Note that the variable-scope that is supplied is
            /// ignored, process-variables are always local.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInstanceResponse> CreateProcessInstanceAsync(this IActivitiRESTAPI operations, ProcessInstanceCreateRequest body = default(ProcessInstanceCreateRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProcessInstanceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get.
            /// </param>
            public static ProcessInstanceResponse GetProcessInstance(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.GetProcessInstanceAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInstanceResponse> GetProcessInstanceAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstanceWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate or suspend a process instance
            /// </summary>
            /// <remarks>
            /// ## Activate a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "suspend"
            /// } ```
            ///
            ///
            /// ## Suspend a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "activate"
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to activate/suspend.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProcessInstanceResponse PerformProcessInstanceAction(this IActivitiRESTAPI operations, string processInstanceId, ProcessInstanceActionRequest body = default(ProcessInstanceActionRequest))
            {
                return operations.PerformProcessInstanceActionAsync(processInstanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate or suspend a process instance
            /// </summary>
            /// <remarks>
            /// ## Activate a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "suspend"
            /// } ```
            ///
            ///
            /// ## Suspend a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "activate"
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to activate/suspend.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProcessInstanceResponse> PerformProcessInstanceActionAsync(this IActivitiRESTAPI operations, string processInstanceId, ProcessInstanceActionRequest body = default(ProcessInstanceActionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PerformProcessInstanceActionWithHttpMessagesAsync(processInstanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to delete.
            /// </param>
            /// <param name='deleteReason'>
            /// </param>
            public static void DeleteProcessInstance(this IActivitiRESTAPI operations, string processInstanceId, string deleteReason = default(string))
            {
                operations.DeleteProcessInstanceAsync(processInstanceId, deleteReason).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to delete.
            /// </param>
            /// <param name='deleteReason'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProcessInstanceAsync(this IActivitiRESTAPI operations, string processInstanceId, string deleteReason = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProcessInstanceWithHttpMessagesAsync(processInstanceId, deleteReason, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get diagram for a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get the diagram for.
            /// </param>
            public static IList<byte[]> GetProcessInstanceDiagram(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.GetProcessInstanceDiagramAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagram for a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get the diagram for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetProcessInstanceDiagramAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstanceDiagramWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get involved people for process instance
            /// </summary>
            /// <remarks>
            /// Note that the groupId in Response Body will always be null, as it�s only
            /// possible to involve users with a process-instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the links for.
            /// </param>
            public static IList<RestIdentityLink> ListProcessInstanceIdentityLinks(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.ListProcessInstanceIdentityLinksAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get involved people for process instance
            /// </summary>
            /// <remarks>
            /// Note that the groupId in Response Body will always be null, as it�s only
            /// possible to involve users with a process-instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the links for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestIdentityLink>> ListProcessInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListProcessInstanceIdentityLinksWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add an involved user to a process instance
            /// </summary>
            /// <remarks>
            /// Note that the groupId in Response Body will always be null, as it�s only
            /// possible to involve users with a process-instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the links for.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RestIdentityLink CreateProcessInstanceIdentityLinks(this IActivitiRESTAPI operations, string processInstanceId, RestIdentityLink body = default(RestIdentityLink))
            {
                return operations.CreateProcessInstanceIdentityLinksAsync(processInstanceId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add an involved user to a process instance
            /// </summary>
            /// <remarks>
            /// Note that the groupId in Response Body will always be null, as it�s only
            /// possible to involve users with a process-instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the links for.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> CreateProcessInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string processInstanceId, RestIdentityLink body = default(RestIdentityLink), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProcessInstanceIdentityLinksWithHttpMessagesAsync(processInstanceId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific involved people from process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get.
            /// </param>
            /// <param name='identityId'>
            /// </param>
            /// <param name='type'>
            /// </param>
            public static RestIdentityLink GetProcessInstanceIdentityLinks(this IActivitiRESTAPI operations, string processInstanceId, string identityId, string type)
            {
                return operations.GetProcessInstanceIdentityLinksAsync(processInstanceId, identityId, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific involved people from process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to get.
            /// </param>
            /// <param name='identityId'>
            /// </param>
            /// <param name='type'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> GetProcessInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string processInstanceId, string identityId, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstanceIdentityLinksWithHttpMessagesAsync(processInstanceId, identityId, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove an involved user to from process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance.
            /// </param>
            /// <param name='identityId'>
            /// The id of the user to delete link for.
            /// </param>
            /// <param name='type'>
            /// Type of link to delete.
            /// </param>
            public static void DeleteProcessInstanceIdentityLinks(this IActivitiRESTAPI operations, string processInstanceId, string identityId, string type)
            {
                operations.DeleteProcessInstanceIdentityLinksAsync(processInstanceId, identityId, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove an involved user to from process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance.
            /// </param>
            /// <param name='identityId'>
            /// The id of the user to delete link for.
            /// </param>
            /// <param name='type'>
            /// Type of link to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProcessInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string processInstanceId, string identityId, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProcessInstanceIdentityLinksWithHttpMessagesAsync(processInstanceId, identityId, type, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of variables for a process instance
            /// </summary>
            /// <remarks>
            /// In case the variable is a binary variable or serializable, the valueUrl
            /// points to an URL to fetch the raw value. If it�s a plain variable, the
            /// value is present in the response. Note that only local scoped variables are
            /// returned, as there is no global scope for process-instance variables.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static IList<RestVariable> GetVariables(this IActivitiRESTAPI operations, string processInstanceId, string scope = default(string))
            {
                return operations.GetVariablesAsync(processInstanceId, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of variables for a process instance
            /// </summary>
            /// <remarks>
            /// In case the variable is a binary variable or serializable, the valueUrl
            /// points to an URL to fetch the raw value. If it�s a plain variable, the
            /// value is present in the response. Note that only local scoped variables are
            /// returned, as there is no global scope for process-instance variables.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestVariable>> GetVariablesAsync(this IActivitiRESTAPI operations, string processInstanceId, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVariablesWithHttpMessagesAsync(processInstanceId, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create variables or new binary variable on a process instance
            /// </summary>
            /// <remarks>
            /// ## Update multiples variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// },
            ///
            /// ...
            /// ] ```
            ///
            ///
            /// Any number of variables can be passed into the request body array. More
            /// information about the variable format can be found in the REST variables
            /// section. Note that scope is ignored, only local variables can be set in a
            /// process instance.
            ///
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// name: Required name of the variable.
            ///
            /// type: Type of variable that is created. If omitted, binary is assumed and
            /// the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to create the new variable for
            /// </param>
            public static object CreateProcessInstanceVariable(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.CreateProcessInstanceVariableAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create variables or new binary variable on a process instance
            /// </summary>
            /// <remarks>
            /// ## Update multiples variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// },
            ///
            /// ...
            /// ] ```
            ///
            ///
            /// Any number of variables can be passed into the request body array. More
            /// information about the variable format can be found in the REST variables
            /// section. Note that scope is ignored, only local variables can be set in a
            /// process instance.
            ///
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// name: Required name of the variable.
            ///
            /// type: Type of variable that is created. If omitted, binary is assumed and
            /// the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to create the new variable for
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateProcessInstanceVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProcessInstanceVariableWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a single or binary variable or multiple variables on a process
            /// instance
            /// </summary>
            /// <remarks>
            /// ## Update multiples variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// },
            ///
            /// ...
            /// ] ```
            ///
            ///
            /// Any number of variables can be passed into the request body array. More
            /// information about the variable format can be found in the REST variables
            /// section. Note that scope is ignored, only local variables can be set in a
            /// process instance.
            ///
            ///
            /// ## Update a single variable
            ///
            /// ```JSON
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// } ```
            ///
            ///
            /// ##  Update an existing binary variable
            ///
            ///
            ///
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// name: Required name of the variable.
            ///
            /// type: Type of variable that is created. If omitted, binary is assumed and
            /// the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to create the new variable for.
            /// </param>
            public static object CreateOrUpdateProcessVariable(this IActivitiRESTAPI operations, string processInstanceId)
            {
                return operations.CreateOrUpdateProcessVariableAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a single or binary variable or multiple variables on a process
            /// instance
            /// </summary>
            /// <remarks>
            /// ## Update multiples variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// },
            ///
            /// ...
            /// ] ```
            ///
            ///
            /// Any number of variables can be passed into the request body array. More
            /// information about the variable format can be found in the REST variables
            /// section. Note that scope is ignored, only local variables can be set in a
            /// process instance.
            ///
            ///
            /// ## Update a single variable
            ///
            /// ```JSON
            /// {
            /// "name":"intProcVar"
            /// "type":"integer"
            /// "value":123
            /// } ```
            ///
            ///
            /// ##  Update an existing binary variable
            ///
            ///
            ///
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// name: Required name of the variable.
            ///
            /// type: Type of variable that is created. If omitted, binary is assumed and
            /// the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to create the new variable for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateOrUpdateProcessVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateProcessVariableWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all variables
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            public static void DeleteLocalProcessVariable(this IActivitiRESTAPI operations, string processInstanceId)
            {
                operations.DeleteLocalProcessVariableAsync(processInstanceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all variables
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteLocalProcessVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteLocalProcessVariableWithHttpMessagesAsync(processInstanceId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a variable for a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static RestVariable GetProcessInstanceVariable(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string))
            {
                return operations.GetProcessInstanceVariableAsync(processInstanceId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a variable for a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> GetProcessInstanceVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstanceVariableWithHttpMessagesAsync(processInstanceId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a single variable on a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            public static RestVariable UpdateProcessInstanceVariable(this IActivitiRESTAPI operations, string processInstanceId, string variableName)
            {
                return operations.UpdateProcessInstanceVariableAsync(processInstanceId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a single variable on a process instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// The id of the process instance to the variables for.
            /// </param>
            /// <param name='variableName'>
            /// Name of the variable to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> UpdateProcessInstanceVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProcessInstanceVariableWithHttpMessagesAsync(processInstanceId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a variable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static void DeleteProcessInstanceVariable(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string))
            {
                operations.DeleteProcessInstanceVariableAsync(processInstanceId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a variable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProcessInstanceVariableAsync(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProcessInstanceVariableWithHttpMessagesAsync(processInstanceId, variableName, scope, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the binary data for a variable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            public static IList<byte[]> GetProcessInstanceVariableData(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string))
            {
                return operations.GetProcessInstanceVariableDataAsync(processInstanceId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a variable
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='processInstanceId'>
            /// </param>
            /// <param name='variableName'>
            /// </param>
            /// <param name='scope'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetProcessInstanceVariableDataAsync(this IActivitiRESTAPI operations, string processInstanceId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProcessInstanceVariableDataWithHttpMessagesAsync(processInstanceId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Signal event received
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void SignalEventReceived(this IActivitiRESTAPI operations, SignalEventReceivedRequest body = default(SignalEventReceivedRequest))
            {
                operations.SignalEventReceivedAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Signal event received
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SignalEventReceivedAsync(this IActivitiRESTAPI operations, SignalEventReceivedRequest body = default(SignalEventReceivedRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SignalEventReceivedWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List of tasks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='nameLike'>
            /// Only return tasks with a name like the given name.
            /// </param>
            /// <param name='description'>
            /// Only return tasks with the given description.
            /// </param>
            /// <param name='priority'>
            /// Only return tasks with the given priority.
            /// </param>
            /// <param name='minimumPriority'>
            /// Only return tasks with a priority greater than the given value.
            /// </param>
            /// <param name='maximumPriority'>
            /// Only return tasks with a priority lower than the given value.
            /// </param>
            /// <param name='assignee'>
            /// Only return tasks assigned to the given user.
            /// </param>
            /// <param name='assigneeLike'>
            /// Only return tasks assigned with an assignee like the given value.
            /// </param>
            /// <param name='owner'>
            /// Only return tasks owned by the given user.
            /// </param>
            /// <param name='ownerLike'>
            /// Only return tasks assigned with an owner like the given value.
            /// </param>
            /// <param name='unassigned'>
            /// Only return tasks that are not assigned to anyone. If false is passed, the
            /// value is ignored.
            /// </param>
            /// <param name='delegationState'>
            /// Only return tasks that have the given delegation state. Possible values are
            /// pending and resolved.
            /// </param>
            /// <param name='candidateUser'>
            /// Only return tasks that can be claimed by the given user. This includes both
            /// tasks where the user is an explicit candidate for and task that are
            /// claimable by a group that the user is a member of.
            /// </param>
            /// <param name='candidateGroup'>
            /// Only return tasks that can be claimed by a user in the given group.
            /// </param>
            /// <param name='candidateGroups'>
            /// Only return tasks that can be claimed by a user in the given groups. Values
            /// split by comma.
            /// </param>
            /// <param name='involvedUser'>
            /// Only return tasks in which the given user is involved.
            /// </param>
            /// <param name='taskDefinitionKey'>
            /// Only return tasks with the given task definition id.
            /// </param>
            /// <param name='taskDefinitionKeyLike'>
            /// Only return tasks with a given task definition id like the given value.
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return tasks which are part of the process instance with the given id.
            /// </param>
            /// <param name='processInstanceBusinessKey'>
            /// Only return tasks which are part of the process instance with the given
            /// business key.
            /// </param>
            /// <param name='processInstanceBusinessKeyLike'>
            /// Only return tasks which are part of the process instance which has a
            /// business key like the given value.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given id.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given key.
            /// </param>
            /// <param name='processDefinitionKeyLike'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with a key like the given value.
            /// </param>
            /// <param name='processDefinitionName'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given name.
            /// </param>
            /// <param name='processDefinitionNameLike'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with a name like the given value.
            /// </param>
            /// <param name='executionId'>
            /// Only return tasks which are part of the execution with the given id.
            /// </param>
            /// <param name='createdOn'>
            /// Only return tasks which are created on the given date.
            /// </param>
            /// <param name='createdBefore'>
            /// Only return tasks which are created before the given date.
            /// </param>
            /// <param name='createdAfter'>
            /// Only return tasks which are created after the given date.
            /// </param>
            /// <param name='dueOn'>
            /// Only return tasks which are due on the given date.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return tasks which are due before the given date.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return tasks which are due after the given date.
            /// </param>
            /// <param name='withoutDueDate'>
            /// Only return tasks which don�t have a due date. The property is ignored if
            /// the value is false.
            /// </param>
            /// <param name='excludeSubTasks'>
            /// Only return tasks that are not a subtask of another task.
            /// </param>
            /// <param name='active'>
            /// If true, only return tasks that are not suspended (either part of a process
            /// that is not suspended or not part of a process at all). If false, only
            /// tasks that are part of suspended process instances are returned.
            /// </param>
            /// <param name='includeTaskLocalVariables'>
            /// Indication to include task local variables in the result.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// Indication to include process variables in the result.
            /// </param>
            /// <param name='tenantId'>
            /// Only return tasks with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return tasks with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns tasks without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='candidateOrAssigned'>
            /// Select tasks that has been claimed or assigned to user or waiting to claim
            /// by user (candidate user or groups).
            /// </param>
            /// <param name='category'>
            /// Select tasks with the given category. Note that this is the task category,
            /// not the category of the process definition (namespace within the BPMN Xml).
            ///
            /// </param>
            public static DataResponse GetTasks(this IActivitiRESTAPI operations, string name = default(string), string nameLike = default(string), string description = default(string), string priority = default(string), string minimumPriority = default(string), string maximumPriority = default(string), string assignee = default(string), string assigneeLike = default(string), string owner = default(string), string ownerLike = default(string), string unassigned = default(string), string delegationState = default(string), string candidateUser = default(string), string candidateGroup = default(string), string candidateGroups = default(string), string involvedUser = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyLike = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string createdOn = default(string), string createdBefore = default(string), string createdAfter = default(string), string dueOn = default(string), string dueBefore = default(string), string dueAfter = default(string), bool? withoutDueDate = default(bool?), bool? excludeSubTasks = default(bool?), bool? active = default(bool?), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string candidateOrAssigned = default(string), string category = default(string))
            {
                return operations.GetTasksAsync(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyLike, processDefinitionId, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, executionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of tasks
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Only return models with the given version.
            /// </param>
            /// <param name='nameLike'>
            /// Only return tasks with a name like the given name.
            /// </param>
            /// <param name='description'>
            /// Only return tasks with the given description.
            /// </param>
            /// <param name='priority'>
            /// Only return tasks with the given priority.
            /// </param>
            /// <param name='minimumPriority'>
            /// Only return tasks with a priority greater than the given value.
            /// </param>
            /// <param name='maximumPriority'>
            /// Only return tasks with a priority lower than the given value.
            /// </param>
            /// <param name='assignee'>
            /// Only return tasks assigned to the given user.
            /// </param>
            /// <param name='assigneeLike'>
            /// Only return tasks assigned with an assignee like the given value.
            /// </param>
            /// <param name='owner'>
            /// Only return tasks owned by the given user.
            /// </param>
            /// <param name='ownerLike'>
            /// Only return tasks assigned with an owner like the given value.
            /// </param>
            /// <param name='unassigned'>
            /// Only return tasks that are not assigned to anyone. If false is passed, the
            /// value is ignored.
            /// </param>
            /// <param name='delegationState'>
            /// Only return tasks that have the given delegation state. Possible values are
            /// pending and resolved.
            /// </param>
            /// <param name='candidateUser'>
            /// Only return tasks that can be claimed by the given user. This includes both
            /// tasks where the user is an explicit candidate for and task that are
            /// claimable by a group that the user is a member of.
            /// </param>
            /// <param name='candidateGroup'>
            /// Only return tasks that can be claimed by a user in the given group.
            /// </param>
            /// <param name='candidateGroups'>
            /// Only return tasks that can be claimed by a user in the given groups. Values
            /// split by comma.
            /// </param>
            /// <param name='involvedUser'>
            /// Only return tasks in which the given user is involved.
            /// </param>
            /// <param name='taskDefinitionKey'>
            /// Only return tasks with the given task definition id.
            /// </param>
            /// <param name='taskDefinitionKeyLike'>
            /// Only return tasks with a given task definition id like the given value.
            /// </param>
            /// <param name='processInstanceId'>
            /// Only return tasks which are part of the process instance with the given id.
            /// </param>
            /// <param name='processInstanceBusinessKey'>
            /// Only return tasks which are part of the process instance with the given
            /// business key.
            /// </param>
            /// <param name='processInstanceBusinessKeyLike'>
            /// Only return tasks which are part of the process instance which has a
            /// business key like the given value.
            /// </param>
            /// <param name='processDefinitionId'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given id.
            /// </param>
            /// <param name='processDefinitionKey'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given key.
            /// </param>
            /// <param name='processDefinitionKeyLike'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with a key like the given value.
            /// </param>
            /// <param name='processDefinitionName'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with the given name.
            /// </param>
            /// <param name='processDefinitionNameLike'>
            /// Only return tasks which are part of a process instance which has a process
            /// definition with a name like the given value.
            /// </param>
            /// <param name='executionId'>
            /// Only return tasks which are part of the execution with the given id.
            /// </param>
            /// <param name='createdOn'>
            /// Only return tasks which are created on the given date.
            /// </param>
            /// <param name='createdBefore'>
            /// Only return tasks which are created before the given date.
            /// </param>
            /// <param name='createdAfter'>
            /// Only return tasks which are created after the given date.
            /// </param>
            /// <param name='dueOn'>
            /// Only return tasks which are due on the given date.
            /// </param>
            /// <param name='dueBefore'>
            /// Only return tasks which are due before the given date.
            /// </param>
            /// <param name='dueAfter'>
            /// Only return tasks which are due after the given date.
            /// </param>
            /// <param name='withoutDueDate'>
            /// Only return tasks which don�t have a due date. The property is ignored if
            /// the value is false.
            /// </param>
            /// <param name='excludeSubTasks'>
            /// Only return tasks that are not a subtask of another task.
            /// </param>
            /// <param name='active'>
            /// If true, only return tasks that are not suspended (either part of a process
            /// that is not suspended or not part of a process at all). If false, only
            /// tasks that are part of suspended process instances are returned.
            /// </param>
            /// <param name='includeTaskLocalVariables'>
            /// Indication to include task local variables in the result.
            /// </param>
            /// <param name='includeProcessVariables'>
            /// Indication to include process variables in the result.
            /// </param>
            /// <param name='tenantId'>
            /// Only return tasks with the given tenantId.
            /// </param>
            /// <param name='tenantIdLike'>
            /// Only return tasks with a tenantId like the given value.
            /// </param>
            /// <param name='withoutTenantId'>
            /// If true, only returns tasks without a tenantId set. If false, the
            /// withoutTenantId parameter is ignored.
            /// </param>
            /// <param name='candidateOrAssigned'>
            /// Select tasks that has been claimed or assigned to user or waiting to claim
            /// by user (candidate user or groups).
            /// </param>
            /// <param name='category'>
            /// Select tasks with the given category. Note that this is the task category,
            /// not the category of the process definition (namespace within the BPMN Xml).
            ///
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataResponse> GetTasksAsync(this IActivitiRESTAPI operations, string name = default(string), string nameLike = default(string), string description = default(string), string priority = default(string), string minimumPriority = default(string), string maximumPriority = default(string), string assignee = default(string), string assigneeLike = default(string), string owner = default(string), string ownerLike = default(string), string unassigned = default(string), string delegationState = default(string), string candidateUser = default(string), string candidateGroup = default(string), string candidateGroups = default(string), string involvedUser = default(string), string taskDefinitionKey = default(string), string taskDefinitionKeyLike = default(string), string processInstanceId = default(string), string processInstanceBusinessKey = default(string), string processInstanceBusinessKeyLike = default(string), string processDefinitionId = default(string), string processDefinitionKey = default(string), string processDefinitionKeyLike = default(string), string processDefinitionName = default(string), string processDefinitionNameLike = default(string), string executionId = default(string), string createdOn = default(string), string createdBefore = default(string), string createdAfter = default(string), string dueOn = default(string), string dueBefore = default(string), string dueAfter = default(string), bool? withoutDueDate = default(bool?), bool? excludeSubTasks = default(bool?), bool? active = default(bool?), bool? includeTaskLocalVariables = default(bool?), bool? includeProcessVariables = default(bool?), string tenantId = default(string), string tenantIdLike = default(string), bool? withoutTenantId = default(bool?), string candidateOrAssigned = default(string), string category = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTasksWithHttpMessagesAsync(name, nameLike, description, priority, minimumPriority, maximumPriority, assignee, assigneeLike, owner, ownerLike, unassigned, delegationState, candidateUser, candidateGroup, candidateGroups, involvedUser, taskDefinitionKey, taskDefinitionKeyLike, processInstanceId, processInstanceBusinessKey, processInstanceBusinessKeyLike, processDefinitionId, processDefinitionKey, processDefinitionKeyLike, processDefinitionName, processDefinitionNameLike, executionId, createdOn, createdBefore, createdAfter, dueOn, dueBefore, dueAfter, withoutDueDate, excludeSubTasks, active, includeTaskLocalVariables, includeProcessVariables, tenantId, tenantIdLike, withoutTenantId, candidateOrAssigned, category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TaskResponse CreateTask(this IActivitiRESTAPI operations, TaskRequest body = default(TaskRequest))
            {
                return operations.CreateTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResponse> CreateTaskAsync(this IActivitiRESTAPI operations, TaskRequest body = default(TaskRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get.
            /// </param>
            public static TaskResponse GetTask(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetTaskAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResponse> GetTaskAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Tasks actions
            /// </summary>
            /// <remarks>
            /// ## Complete a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "complete",
            /// "variables" : []
            /// } ```Completes the task. Optional variable array can be passed in using the
            /// variables property. More information about the variable format can be found
            /// in the REST variables section. Note that the variable-scope that is
            /// supplied is ignored and the variables are set on the parent-scope unless a
            /// variable exists in a local scope, which is overridden in this case. This is
            /// the same behavior as the TaskService.completeTask(taskId, variables)
            /// invocation.
            ///
            /// Note that also a transientVariables property is accepted as part of this
            /// json, that follows the same structure as the variables property.
            ///
            ///
            /// ## Claim a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "claim",
            /// "assignee" : "userWhoClaims"
            /// } ```
            ///
            ///
            /// Claims the task by the given assignee. If the assignee is null, the task is
            /// assigned to no-one, claimable again.
            ///
            ///
            /// ## Delegate a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "delegate",
            /// "assignee" : "userToDelegateTo"
            /// } ```
            ///
            ///
            /// Delegates the task to the given assignee. The assignee is required.
            ///
            ///
            /// ## Suspend a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "resolve"
            /// } ```
            ///
            ///
            /// Resolves the task delegation. The task is assigned back to the task owner
            /// (if any).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void ExecuteTaskAction(this IActivitiRESTAPI operations, string taskId, TaskActionRequest body = default(TaskActionRequest))
            {
                operations.ExecuteTaskActionAsync(taskId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tasks actions
            /// </summary>
            /// <remarks>
            /// ## Complete a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "complete",
            /// "variables" : []
            /// } ```Completes the task. Optional variable array can be passed in using the
            /// variables property. More information about the variable format can be found
            /// in the REST variables section. Note that the variable-scope that is
            /// supplied is ignored and the variables are set on the parent-scope unless a
            /// variable exists in a local scope, which is overridden in this case. This is
            /// the same behavior as the TaskService.completeTask(taskId, variables)
            /// invocation.
            ///
            /// Note that also a transientVariables property is accepted as part of this
            /// json, that follows the same structure as the variables property.
            ///
            ///
            /// ## Claim a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "claim",
            /// "assignee" : "userWhoClaims"
            /// } ```
            ///
            ///
            /// Claims the task by the given assignee. If the assignee is null, the task is
            /// assigned to no-one, claimable again.
            ///
            ///
            /// ## Delegate a task - Request Body
            ///
            /// ```JSON
            /// {
            /// "action" : "delegate",
            /// "assignee" : "userToDelegateTo"
            /// } ```
            ///
            ///
            /// Delegates the task to the given assignee. The assignee is required.
            ///
            ///
            /// ## Suspend a process instance
            ///
            /// ```JSON
            /// {
            /// "action" : "resolve"
            /// } ```
            ///
            ///
            /// Resolves the task delegation. The task is assigned back to the task owner
            /// (if any).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExecuteTaskActionAsync(this IActivitiRESTAPI operations, string taskId, TaskActionRequest body = default(TaskActionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ExecuteTaskActionWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a task
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the
            /// assignee attribute in the request body JSON-object, only updating the
            /// assignee of the task, leaving all other fields unaffected. When an
            /// attribute is explicitly included and is set to null, the task-value will be
            /// updated to null. Example: {"dueDate" : null} will clear the duedate of the
            /// task).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static TaskResponse UpdateTask(this IActivitiRESTAPI operations, string taskId, TaskRequest body = default(TaskRequest))
            {
                return operations.UpdateTaskAsync(taskId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a task
            /// </summary>
            /// <remarks>
            /// All request values are optional. For example, you can only include the
            /// assignee attribute in the request body JSON-object, only updating the
            /// assignee of the task, leaving all other fields unaffected. When an
            /// attribute is explicitly included and is set to null, the task-value will be
            /// updated to null. Example: {"dueDate" : null} will clear the duedate of the
            /// task).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskResponse> UpdateTaskAsync(this IActivitiRESTAPI operations, string taskId, TaskRequest body = default(TaskRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete.
            /// </param>
            public static void DeleteTask(this IActivitiRESTAPI operations, string taskId)
            {
                operations.DeleteTaskAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTaskAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTaskWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all attachments on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the attachments for.
            /// </param>
            public static IList<AttachmentResponse> GetAttachments(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetAttachmentsAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all attachments on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the attachments for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AttachmentResponse>> GetAttachmentsAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentsWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new attachment on a task, containing a link to an external
            /// resource or an attached file
            /// </summary>
            /// <remarks>
            /// ## Create a new attachment on a task, containing a link to an external
            /// resource
            ///
            /// ```JSON
            /// {
            /// "name":"Simple attachment",
            /// "description":"Simple attachment description",
            /// "type":"simpleType",
            /// "externalUrl":"http://activiti.org"
            /// } ```
            ///
            ///
            /// Only the attachment name is required to create a new attachment.
            ///
            ///
            ///
            /// ## Create a new attachment on a task, with an attached file
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// - *description*: Description of the attachment, optional.
            ///
            /// - *type*: Type of attachment, optional. Supports any arbitrary string or a
            /// valid HTTP content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the attachment for.
            /// </param>
            public static AttachmentResponse CreateAttachment(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.CreateAttachmentAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new attachment on a task, containing a link to an external
            /// resource or an attached file
            /// </summary>
            /// <remarks>
            /// ## Create a new attachment on a task, containing a link to an external
            /// resource
            ///
            /// ```JSON
            /// {
            /// "name":"Simple attachment",
            /// "description":"Simple attachment description",
            /// "type":"simpleType",
            /// "externalUrl":"http://activiti.org"
            /// } ```
            ///
            ///
            /// Only the attachment name is required to create a new attachment.
            ///
            ///
            ///
            /// ## Create a new attachment on a task, with an attached file
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// - *description*: Description of the attachment, optional.
            ///
            /// - *type*: Type of attachment, optional. Supports any arbitrary string or a
            /// valid HTTP content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the attachment for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachmentResponse> CreateAttachmentAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAttachmentWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an attachment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the attachment for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment.
            /// </param>
            public static AttachmentResponse GetAttachment(this IActivitiRESTAPI operations, string taskId, string attachmentId)
            {
                return operations.GetAttachmentAsync(taskId, attachmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an attachment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the attachment for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AttachmentResponse> GetAttachmentAsync(this IActivitiRESTAPI operations, string taskId, string attachmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentWithHttpMessagesAsync(taskId, attachmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an attachment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete the attachment for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment.
            /// </param>
            public static void DeleteAttachment(this IActivitiRESTAPI operations, string taskId, string attachmentId)
            {
                operations.DeleteAttachmentAsync(taskId, attachmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an attachment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete the attachment for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAttachmentAsync(this IActivitiRESTAPI operations, string taskId, string attachmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAttachmentWithHttpMessagesAsync(taskId, attachmentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the content for an attachment
            /// </summary>
            /// <remarks>
            /// The response body contains the binary content. By default, the content-type
            /// of the response is set to application/octet-stream unless the attachment
            /// type contains a valid Content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable data for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment, a 404 is returned when the attachment points to
            /// an external URL rather than content attached in Activiti.
            /// </param>
            public static IList<byte[]> GetAttachmentContent(this IActivitiRESTAPI operations, string taskId, string attachmentId)
            {
                return operations.GetAttachmentContentAsync(taskId, attachmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the content for an attachment
            /// </summary>
            /// <remarks>
            /// The response body contains the binary content. By default, the content-type
            /// of the response is set to application/octet-stream unless the attachment
            /// type contains a valid Content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable data for.
            /// </param>
            /// <param name='attachmentId'>
            /// The id of the attachment, a 404 is returned when the attachment points to
            /// an external URL rather than content attached in Activiti.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GetAttachmentContentAsync(this IActivitiRESTAPI operations, string taskId, string attachmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttachmentContentWithHttpMessagesAsync(taskId, attachmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all comments on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the comments for.
            /// </param>
            public static IList<CommentResponse> ListTaskComments(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.ListTaskCommentsAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all comments on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the comments for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CommentResponse>> ListTaskCommentsAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTaskCommentsWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the comment for.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommentResponse CreateTaskComments(this IActivitiRESTAPI operations, string taskId, CommentRequest body = default(CommentRequest))
            {
                return operations.CreateTaskCommentsAsync(taskId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the comment for.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommentResponse> CreateTaskCommentsAsync(this IActivitiRESTAPI operations, string taskId, CommentRequest body = default(CommentRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskCommentsWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            public static CommentResponse GetTaskComment(this IActivitiRESTAPI operations, string taskId, string commentId)
            {
                return operations.GetTaskCommentAsync(taskId, commentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommentResponse> GetTaskCommentAsync(this IActivitiRESTAPI operations, string taskId, string commentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskCommentWithHttpMessagesAsync(taskId, commentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            public static void DeleteTaskComment(this IActivitiRESTAPI operations, string taskId, string commentId)
            {
                operations.DeleteTaskCommentAsync(taskId, commentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a comment on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to delete the comment for.
            /// </param>
            /// <param name='commentId'>
            /// The id of the comment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTaskCommentAsync(this IActivitiRESTAPI operations, string taskId, string commentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTaskCommentWithHttpMessagesAsync(taskId, commentId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all events for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the events for.
            /// </param>
            public static IList<EventResponse> GetEvents(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetEventsAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all events for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the events for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventResponse>> GetEventsAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an event on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the event for.
            /// </param>
            /// <param name='eventId'>
            /// The id of the event.
            /// </param>
            public static EventResponse GetEvent(this IActivitiRESTAPI operations, string taskId, string eventId)
            {
                return operations.GetEventAsync(taskId, eventId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an event on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the event for.
            /// </param>
            /// <param name='eventId'>
            /// The id of the event.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventResponse> GetEventAsync(this IActivitiRESTAPI operations, string taskId, string eventId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventWithHttpMessagesAsync(taskId, eventId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an event on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            public static void DeleteEvent(this IActivitiRESTAPI operations, string taskId, string eventId)
            {
                operations.DeleteEventAsync(taskId, eventId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an event on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='eventId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEventAsync(this IActivitiRESTAPI operations, string taskId, string eventId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEventWithHttpMessagesAsync(taskId, eventId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get all identity links for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the identity links for.
            /// </param>
            public static IList<RestIdentityLink> ListTasksInstanceIdentityLinks(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.ListTasksInstanceIdentityLinksAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all identity links for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get the identity links for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestIdentityLink>> ListTasksInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTasksInstanceIdentityLinksWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create an identity link on a task
            /// </summary>
            /// <remarks>
            /// ## Request body (user)
            ///
            /// ```JSON
            /// {
            /// "userId" : "kermit",
            /// "type" : "candidate",
            /// } ```
            ///
            ///
            /// ## Request body (group)
            ///
            /// ```JSON
            /// {
            /// "groupId" : "sales",
            /// "type" : "candidate",
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task .
            /// </param>
            /// <param name='body'>
            /// </param>
            public static RestIdentityLink CreateTaskInstanceIdentityLinks(this IActivitiRESTAPI operations, string taskId, RestIdentityLink body = default(RestIdentityLink))
            {
                return operations.CreateTaskInstanceIdentityLinksAsync(taskId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create an identity link on a task
            /// </summary>
            /// <remarks>
            /// ## Request body (user)
            ///
            /// ```JSON
            /// {
            /// "userId" : "kermit",
            /// "type" : "candidate",
            /// } ```
            ///
            ///
            /// ## Request body (group)
            ///
            /// ```JSON
            /// {
            /// "groupId" : "sales",
            /// "type" : "candidate",
            /// } ```
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task .
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> CreateTaskInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string taskId, RestIdentityLink body = default(RestIdentityLink), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskInstanceIdentityLinksWithHttpMessagesAsync(taskId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all identitylinks for a task for either groups or users
            /// </summary>
            /// <remarks>
            /// ## Get all identitylinks for a task URL
            ///
            /// ```
            /// GET runtime/tasks/{taskId}/identitylinks/users
            /// GET runtime/tasks/{taskId}/identitylinks/groups  ```
            ///
            ///
            /// Returns only identity links targetting either users or groups. Response
            /// body and status-codes are exactly the same as when getting the full list of
            /// identity links for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='family'>
            /// </param>
            public static IList<RestIdentityLink> GetIdentityLinksForFamily(this IActivitiRESTAPI operations, string taskId, string family)
            {
                return operations.GetIdentityLinksForFamilyAsync(taskId, family).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all identitylinks for a task for either groups or users
            /// </summary>
            /// <remarks>
            /// ## Get all identitylinks for a task URL
            ///
            /// ```
            /// GET runtime/tasks/{taskId}/identitylinks/users
            /// GET runtime/tasks/{taskId}/identitylinks/groups  ```
            ///
            ///
            /// Returns only identity links targetting either users or groups. Response
            /// body and status-codes are exactly the same as when getting the full list of
            /// identity links for a task.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='family'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestIdentityLink>> GetIdentityLinksForFamilyAsync(this IActivitiRESTAPI operations, string taskId, string family, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIdentityLinksForFamilyWithHttpMessagesAsync(taskId, family, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a single identity link on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task .
            /// </param>
            /// <param name='family'>
            /// Either groups or users, depending on what kind of identity is targeted.
            /// </param>
            /// <param name='identityId'>
            /// The id of the identity.
            /// </param>
            /// <param name='type'>
            /// The type of identity link.
            /// </param>
            public static RestIdentityLink GetTaskInstanceIdentityLinks(this IActivitiRESTAPI operations, string taskId, string family, string identityId, string type)
            {
                return operations.GetTaskInstanceIdentityLinksAsync(taskId, family, identityId, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a single identity link on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task .
            /// </param>
            /// <param name='family'>
            /// Either groups or users, depending on what kind of identity is targeted.
            /// </param>
            /// <param name='identityId'>
            /// The id of the identity.
            /// </param>
            /// <param name='type'>
            /// The type of identity link.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestIdentityLink> GetTaskInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string taskId, string family, string identityId, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskInstanceIdentityLinksWithHttpMessagesAsync(taskId, family, identityId, type, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an identity link on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task.
            /// </param>
            /// <param name='family'>
            /// Either groups or users, depending on what kind of identity is targeted.
            /// </param>
            /// <param name='identityId'>
            /// The id of the identity.
            /// </param>
            /// <param name='type'>
            /// The type of identity link.
            /// </param>
            public static void DeleteTaskInstanceIdentityLinks(this IActivitiRESTAPI operations, string taskId, string family, string identityId, string type)
            {
                operations.DeleteTaskInstanceIdentityLinksAsync(taskId, family, identityId, type).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an identity link on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task.
            /// </param>
            /// <param name='family'>
            /// Either groups or users, depending on what kind of identity is targeted.
            /// </param>
            /// <param name='identityId'>
            /// The id of the identity.
            /// </param>
            /// <param name='type'>
            /// The type of identity link.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTaskInstanceIdentityLinksAsync(this IActivitiRESTAPI operations, string taskId, string family, string identityId, string type, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTaskInstanceIdentityLinksWithHttpMessagesAsync(taskId, family, identityId, type, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of sub tasks for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            public static IList<TaskResponse> GetSubTasks(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.GetSubTasksAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of sub tasks for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaskResponse>> GetSubTasksAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubTasksWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all variables for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get variables for.
            /// </param>
            public static IList<RestVariable> ListTaskVariables(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.ListTaskVariablesAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all variables for a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get variables for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RestVariable>> ListTaskVariablesAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListTaskVariablesWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new variables on a task
            /// </summary>
            /// <remarks>
            /// ## Request body for creating simple (non-binary) variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name" : "myTaskVariable",
            /// "scope" : "local",
            /// "type" : "string",
            /// "value" : "Hello my friend"
            /// },
            /// {
            ///
            /// }
            /// ] ```
            ///
            ///
            /// The request body should be an array containing one or more JSON-objects
            /// representing the variables that should be created.
            ///
            /// - *name*: Required name of the variable
            ///
            /// scope: Scope of variable that is created. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is created. If omitted, reverts to raw
            /// JSON-value type (string, boolean, integer or double).
            ///
            /// - *value*: Variable value.
            ///
            /// More information about the variable format can be found in the REST
            /// variables section.
            ///
            ///
            /// ## Request body for Creating a new binary variable
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// scope: Scope of variable that is created. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is created. If omitted, binary is assumed
            /// and the binary data in the request will be stored as an array of bytes.
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the new variable for.
            /// </param>
            public static object CreateTaskVariable(this IActivitiRESTAPI operations, string taskId)
            {
                return operations.CreateTaskVariableAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new variables on a task
            /// </summary>
            /// <remarks>
            /// ## Request body for creating simple (non-binary) variables
            ///
            /// ```JSON
            /// [
            /// {
            /// "name" : "myTaskVariable",
            /// "scope" : "local",
            /// "type" : "string",
            /// "value" : "Hello my friend"
            /// },
            /// {
            ///
            /// }
            /// ] ```
            ///
            ///
            /// The request body should be an array containing one or more JSON-objects
            /// representing the variables that should be created.
            ///
            /// - *name*: Required name of the variable
            ///
            /// scope: Scope of variable that is created. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is created. If omitted, reverts to raw
            /// JSON-value type (string, boolean, integer or double).
            ///
            /// - *value*: Variable value.
            ///
            /// More information about the variable format can be found in the REST
            /// variables section.
            ///
            ///
            /// ## Request body for Creating a new binary variable
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// scope: Scope of variable that is created. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is created. If omitted, binary is assumed
            /// and the binary data in the request will be stored as an array of bytes.
            ///
            ///
            ///
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to create the new variable for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTaskVariableAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskVariableWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete all local variables on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task the variable to delete belongs to.
            /// </param>
            public static void DeleteAllLocalTaskVariables(this IActivitiRESTAPI operations, string taskId)
            {
                operations.DeleteAllLocalTaskVariablesAsync(taskId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete all local variables on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task the variable to delete belongs to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllLocalTaskVariablesAsync(this IActivitiRESTAPI operations, string taskId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllLocalTaskVariablesWithHttpMessagesAsync(taskId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a variable from a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// Scope of variable to be returned. When local, only task-local variable
            /// value is returned. When global, only variable value from the task�s parent
            /// execution-hierarchy are returned. When the parameter is omitted, a local
            /// variable will be returned if it exists, otherwise a global variable.
            /// </param>
            public static RestVariable GetTaskInstanceVariable(this IActivitiRESTAPI operations, string taskId, string variableName, string scope = default(string))
            {
                return operations.GetTaskInstanceVariableAsync(taskId, variableName, scope).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a variable from a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to get.
            /// </param>
            /// <param name='scope'>
            /// Scope of variable to be returned. When local, only task-local variable
            /// value is returned. When global, only variable value from the task�s parent
            /// execution-hierarchy are returned. When the parameter is omitted, a local
            /// variable will be returned if it exists, otherwise a global variable.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> GetTaskInstanceVariableAsync(this IActivitiRESTAPI operations, string taskId, string variableName, string scope = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskInstanceVariableWithHttpMessagesAsync(taskId, variableName, scope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update an existing variable on a task
            /// </summary>
            /// <remarks>
            /// ## Request body for updating simple (non-binary) variables
            ///
            /// ```JSON
            /// {
            /// "name" : "myTaskVariable",
            /// "scope" : "local",
            /// "type" : "string",
            /// "value" : "Hello my friend"
            /// } ```
            ///
            ///
            /// - *name*: Required name of the variable
            ///
            /// - *scope*: Scope of variable that is updated. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is updated. If omitted, reverts to raw
            /// JSON-value type (string, boolean, integer or double).
            ///
            /// - *value*: Variable value.
            ///
            ///
            /// ## Request body for updating simple (non-binary) variables
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// - *scope*: Scope of variable that is updated. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is updated. If omitted, binary is assumed
            /// and the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to update the variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to update.
            /// </param>
            public static RestVariable UpdateTaskInstanceVariable(this IActivitiRESTAPI operations, string taskId, string variableName)
            {
                return operations.UpdateTaskInstanceVariableAsync(taskId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing variable on a task
            /// </summary>
            /// <remarks>
            /// ## Request body for updating simple (non-binary) variables
            ///
            /// ```JSON
            /// {
            /// "name" : "myTaskVariable",
            /// "scope" : "local",
            /// "type" : "string",
            /// "value" : "Hello my friend"
            /// } ```
            ///
            ///
            /// - *name*: Required name of the variable
            ///
            /// - *scope*: Scope of variable that is updated. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is updated. If omitted, reverts to raw
            /// JSON-value type (string, boolean, integer or double).
            ///
            /// - *value*: Variable value.
            ///
            ///
            /// ## Request body for updating simple (non-binary) variables
            ///
            /// The request should be of type multipart/form-data. There should be a single
            /// file-part included with the binary value of the variable. On top of that,
            /// the following additional form-fields can be present:
            ///
            /// - *name*: Required name of the variable.
            ///
            /// - *scope*: Scope of variable that is updated. If omitted, local is assumed.
            ///
            /// - *type*: Type of variable that is updated. If omitted, binary is assumed
            /// and the binary data in the request will be stored as an array of bytes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to update the variable for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to update.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestVariable> UpdateTaskInstanceVariableAsync(this IActivitiRESTAPI operations, string taskId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskInstanceVariableWithHttpMessagesAsync(taskId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a variable on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task the variable to delete belongs to.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to delete.
            /// </param>
            public static void DeleteTaskInstanceVariable(this IActivitiRESTAPI operations, string taskId, string variableName)
            {
                operations.DeleteTaskInstanceVariableAsync(taskId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a variable on a task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task the variable to delete belongs to.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTaskInstanceVariableAsync(this IActivitiRESTAPI operations, string taskId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteTaskInstanceVariableWithHttpMessagesAsync(taskId, variableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the binary data for a variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable data for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to get data for. Only variables of type binary and
            /// serializable can be used. If any other type of variable is used, a 404 is
            /// returned.
            /// </param>
            public static IList<byte[]> GeTaskVariableData(this IActivitiRESTAPI operations, string taskId, string variableName)
            {
                return operations.GeTaskVariableDataAsync(taskId, variableName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the binary data for a variable
            /// </summary>
            /// <remarks>
            /// The response body contains the binary value of the variable. When the
            /// variable is of type binary, the content-type of the response is set to
            /// application/octet-stream, regardless of the content of the variable or the
            /// request accept-type header. In case of serializable,
            /// application/x-java-serialized-object is used as content-type.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskId'>
            /// The id of the task to get a variable data for.
            /// </param>
            /// <param name='variableName'>
            /// The name of the variable to get data for. Only variables of type binary and
            /// serializable can be used. If any other type of variable is used, a 404 is
            /// returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<byte[]>> GeTaskVariableDataAsync(this IActivitiRESTAPI operations, string taskId, string variableName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeTaskVariableDataWithHttpMessagesAsync(taskId, variableName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
